// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_resource_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V,
        data_1_V,
        data_2_V,
        data_3_V,
        data_4_V,
        data_5_V,
        data_6_V,
        data_7_V,
        data_8_V,
        data_9_V,
        data_10_V,
        data_11_V,
        data_12_V,
        data_13_V,
        data_14_V,
        data_15_V,
        data_16_V,
        data_17_V,
        data_18_V,
        data_19_V,
        data_20_V,
        data_21_V,
        data_22_V,
        data_23_V,
        data_24_V,
        data_25_V,
        data_26_V,
        data_27_V,
        data_28_V,
        data_29_V,
        data_30_V,
        data_31_V,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] data_0_V;
input  [5:0] data_1_V;
input  [5:0] data_2_V;
input  [5:0] data_3_V;
input  [5:0] data_4_V;
input  [5:0] data_5_V;
input  [5:0] data_6_V;
input  [5:0] data_7_V;
input  [5:0] data_8_V;
input  [5:0] data_9_V;
input  [5:0] data_10_V;
input  [5:0] data_11_V;
input  [5:0] data_12_V;
input  [5:0] data_13_V;
input  [5:0] data_14_V;
input  [5:0] data_15_V;
input  [5:0] data_16_V;
input  [5:0] data_17_V;
input  [5:0] data_18_V;
input  [5:0] data_19_V;
input  [5:0] data_20_V;
input  [5:0] data_21_V;
input  [5:0] data_22_V;
input  [5:0] data_23_V;
input  [5:0] data_24_V;
input  [5:0] data_25_V;
input  [5:0] data_26_V;
input  [5:0] data_27_V;
input  [5:0] data_28_V;
input  [5:0] data_29_V;
input  [5:0] data_30_V;
input  [5:0] data_31_V;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln64_fu_696_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] w11_V_address0;
reg    w11_V_ce0;
wire   [34:0] w11_V_q0;
reg   [4:0] w_index15_reg_388;
reg   [15:0] acc_V_0_013_reg_417;
reg   [15:0] acc_V_1_011_reg_431;
reg   [15:0] acc_V_2_09_reg_445;
reg   [15:0] acc_V_3_07_reg_459;
reg   [15:0] acc_V_4_05_reg_473;
wire   [6:0] tmp_1_fu_615_p34;
reg   [6:0] tmp_1_reg_896;
reg   [6:0] tmp_1_reg_896_pp0_iter1_reg;
wire   [4:0] w_index_fu_690_p2;
reg   [4:0] w_index_reg_906;
reg   [0:0] icmp_ln64_reg_911;
reg   [0:0] icmp_ln64_reg_911_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_911_pp0_iter2_reg;
wire   [6:0] trunc_ln76_fu_702_p1;
reg   [6:0] trunc_ln76_reg_915;
reg   [6:0] tmp_2_reg_920;
reg   [6:0] tmp_3_reg_925;
reg   [6:0] tmp_4_reg_930;
reg   [6:0] tmp_5_reg_935;
reg   [11:0] trunc_ln4_reg_940;
reg   [11:0] trunc_ln708_s_reg_945;
reg   [11:0] trunc_ln708_107_reg_950;
reg   [11:0] trunc_ln708_108_reg_955;
reg   [11:0] trunc_ln708_109_reg_960;
wire   [15:0] acc_0_V_fu_847_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] acc_1_V_fu_857_p2;
wire   [15:0] acc_2_V_fu_867_p2;
wire   [15:0] acc_3_V_fu_877_p2;
wire   [15:0] acc_4_V_fu_887_p2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] ap_phi_mux_w_index15_phi_fu_392_p6;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln76_fu_685_p1;
reg    ap_block_pp0_stage0_01001;
wire   [6:0] tmp_1_fu_615_p1;
wire   [6:0] tmp_1_fu_615_p2;
wire   [6:0] tmp_1_fu_615_p3;
wire   [6:0] tmp_1_fu_615_p4;
wire   [6:0] tmp_1_fu_615_p5;
wire   [6:0] tmp_1_fu_615_p6;
wire   [6:0] tmp_1_fu_615_p7;
wire   [6:0] tmp_1_fu_615_p8;
wire   [6:0] tmp_1_fu_615_p9;
wire   [6:0] tmp_1_fu_615_p10;
wire   [6:0] tmp_1_fu_615_p11;
wire   [6:0] tmp_1_fu_615_p12;
wire   [6:0] tmp_1_fu_615_p13;
wire   [6:0] tmp_1_fu_615_p14;
wire   [6:0] tmp_1_fu_615_p15;
wire   [6:0] tmp_1_fu_615_p16;
wire   [6:0] tmp_1_fu_615_p17;
wire   [6:0] tmp_1_fu_615_p18;
wire   [6:0] tmp_1_fu_615_p19;
wire   [6:0] tmp_1_fu_615_p20;
wire   [6:0] tmp_1_fu_615_p21;
wire   [6:0] tmp_1_fu_615_p22;
wire   [6:0] tmp_1_fu_615_p23;
wire   [6:0] tmp_1_fu_615_p24;
wire   [6:0] tmp_1_fu_615_p25;
wire   [6:0] tmp_1_fu_615_p26;
wire   [6:0] tmp_1_fu_615_p27;
wire   [6:0] tmp_1_fu_615_p28;
wire   [6:0] tmp_1_fu_615_p29;
wire   [6:0] tmp_1_fu_615_p30;
wire   [6:0] tmp_1_fu_615_p31;
wire   [6:0] tmp_1_fu_615_p32;
wire  signed [6:0] mul_ln1118_fu_752_p0;
wire  signed [13:0] sext_ln1116_fu_746_p1;
wire  signed [6:0] mul_ln1118_fu_752_p1;
wire   [13:0] mul_ln1118_fu_752_p2;
wire  signed [6:0] mul_ln1118_20_fu_771_p0;
wire  signed [6:0] mul_ln1118_20_fu_771_p1;
wire   [13:0] mul_ln1118_20_fu_771_p2;
wire  signed [6:0] mul_ln1118_21_fu_790_p0;
wire  signed [6:0] mul_ln1118_21_fu_790_p1;
wire   [13:0] mul_ln1118_21_fu_790_p2;
wire  signed [6:0] mul_ln1118_22_fu_809_p0;
wire  signed [6:0] mul_ln1118_22_fu_809_p1;
wire   [13:0] mul_ln1118_22_fu_809_p2;
wire  signed [6:0] mul_ln1118_23_fu_828_p0;
wire  signed [6:0] mul_ln1118_23_fu_828_p1;
wire   [13:0] mul_ln1118_23_fu_828_p2;
wire  signed [15:0] sext_ln708_fu_844_p1;
wire  signed [15:0] sext_ln708_1_fu_854_p1;
wire  signed [15:0] sext_ln708_2_fu_864_p1;
wire  signed [15:0] sext_ln708_3_fu_874_p1;
wire  signed [15:0] sext_ln708_4_fu_884_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_176;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

dense_resource_2_lbW #(
    .DataWidth( 35 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
w11_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w11_V_address0),
    .ce0(w11_V_ce0),
    .q0(w11_V_q0)
);

myproject_axi_muxkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 7 ),
    .din4_WIDTH( 7 ),
    .din5_WIDTH( 7 ),
    .din6_WIDTH( 7 ),
    .din7_WIDTH( 7 ),
    .din8_WIDTH( 7 ),
    .din9_WIDTH( 7 ),
    .din10_WIDTH( 7 ),
    .din11_WIDTH( 7 ),
    .din12_WIDTH( 7 ),
    .din13_WIDTH( 7 ),
    .din14_WIDTH( 7 ),
    .din15_WIDTH( 7 ),
    .din16_WIDTH( 7 ),
    .din17_WIDTH( 7 ),
    .din18_WIDTH( 7 ),
    .din19_WIDTH( 7 ),
    .din20_WIDTH( 7 ),
    .din21_WIDTH( 7 ),
    .din22_WIDTH( 7 ),
    .din23_WIDTH( 7 ),
    .din24_WIDTH( 7 ),
    .din25_WIDTH( 7 ),
    .din26_WIDTH( 7 ),
    .din27_WIDTH( 7 ),
    .din28_WIDTH( 7 ),
    .din29_WIDTH( 7 ),
    .din30_WIDTH( 7 ),
    .din31_WIDTH( 7 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
myproject_axi_muxkbM_U530(
    .din0(tmp_1_fu_615_p1),
    .din1(tmp_1_fu_615_p2),
    .din2(tmp_1_fu_615_p3),
    .din3(tmp_1_fu_615_p4),
    .din4(tmp_1_fu_615_p5),
    .din5(tmp_1_fu_615_p6),
    .din6(tmp_1_fu_615_p7),
    .din7(tmp_1_fu_615_p8),
    .din8(tmp_1_fu_615_p9),
    .din9(tmp_1_fu_615_p10),
    .din10(tmp_1_fu_615_p11),
    .din11(tmp_1_fu_615_p12),
    .din12(tmp_1_fu_615_p13),
    .din13(tmp_1_fu_615_p14),
    .din14(tmp_1_fu_615_p15),
    .din15(tmp_1_fu_615_p16),
    .din16(tmp_1_fu_615_p17),
    .din17(tmp_1_fu_615_p18),
    .din18(tmp_1_fu_615_p19),
    .din19(tmp_1_fu_615_p20),
    .din20(tmp_1_fu_615_p21),
    .din21(tmp_1_fu_615_p22),
    .din22(tmp_1_fu_615_p23),
    .din23(tmp_1_fu_615_p24),
    .din24(tmp_1_fu_615_p25),
    .din25(tmp_1_fu_615_p26),
    .din26(tmp_1_fu_615_p27),
    .din27(tmp_1_fu_615_p28),
    .din28(tmp_1_fu_615_p29),
    .din29(tmp_1_fu_615_p30),
    .din30(tmp_1_fu_615_p31),
    .din31(tmp_1_fu_615_p32),
    .din32(ap_phi_mux_w_index15_phi_fu_392_p6),
    .dout(tmp_1_fu_615_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd0))) begin
        acc_V_0_013_reg_417 <= acc_0_V_fu_847_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_V_0_013_reg_417 <= 16'd65472;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd0))) begin
        acc_V_1_011_reg_431 <= acc_1_V_fu_857_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_V_1_011_reg_431 <= 16'd65376;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd0))) begin
        acc_V_2_09_reg_445 <= acc_2_V_fu_867_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_V_2_09_reg_445 <= 16'd65184;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd0))) begin
        acc_V_3_07_reg_459 <= acc_3_V_fu_877_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_V_3_07_reg_459 <= 16'd160;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd0))) begin
        acc_V_4_05_reg_473 <= acc_4_V_fu_887_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_V_4_05_reg_473 <= 16'd384;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln64_reg_911 == 1'd0))) begin
        w_index15_reg_388 <= w_index_reg_906;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        w_index15_reg_388 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_911 <= icmp_ln64_fu_696_p2;
        icmp_ln64_reg_911_pp0_iter1_reg <= icmp_ln64_reg_911;
        tmp_1_reg_896 <= tmp_1_fu_615_p34;
        tmp_1_reg_896_pp0_iter1_reg <= tmp_1_reg_896;
        tmp_2_reg_920 <= {{w11_V_q0[13:7]}};
        tmp_3_reg_925 <= {{w11_V_q0[20:14]}};
        tmp_4_reg_930 <= {{w11_V_q0[27:21]}};
        tmp_5_reg_935 <= {{w11_V_q0[34:28]}};
        trunc_ln76_reg_915 <= trunc_ln76_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln64_reg_911_pp0_iter2_reg <= icmp_ln64_reg_911_pp0_iter1_reg;
        trunc_ln4_reg_940 <= {{mul_ln1118_fu_752_p2[13:2]}};
        trunc_ln708_107_reg_950 <= {{mul_ln1118_21_fu_790_p2[13:2]}};
        trunc_ln708_108_reg_955 <= {{mul_ln1118_22_fu_809_p2[13:2]}};
        trunc_ln708_109_reg_960 <= {{mul_ln1118_23_fu_828_p2[13:2]}};
        trunc_ln708_s_reg_945 <= {{mul_ln1118_20_fu_771_p2[13:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_index_reg_906 <= w_index_fu_690_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_176)) begin
        if ((icmp_ln64_reg_911 == 1'd1)) begin
            ap_phi_mux_w_index15_phi_fu_392_p6 = 5'd0;
        end else if ((icmp_ln64_reg_911 == 1'd0)) begin
            ap_phi_mux_w_index15_phi_fu_392_p6 = w_index_reg_906;
        end else begin
            ap_phi_mux_w_index15_phi_fu_392_p6 = w_index15_reg_388;
        end
    end else begin
        ap_phi_mux_w_index15_phi_fu_392_p6 = w_index15_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_696_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_911_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w11_V_ce0 = 1'b1;
    end else begin
        w11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_847_p2 = ($signed(sext_ln708_fu_844_p1) + $signed(acc_V_0_013_reg_417));

assign acc_1_V_fu_857_p2 = ($signed(sext_ln708_1_fu_854_p1) + $signed(acc_V_1_011_reg_431));

assign acc_2_V_fu_867_p2 = ($signed(sext_ln708_2_fu_864_p1) + $signed(acc_V_2_09_reg_445));

assign acc_3_V_fu_877_p2 = ($signed(sext_ln708_3_fu_874_p1) + $signed(acc_V_3_07_reg_459));

assign acc_4_V_fu_887_p2 = ($signed(sext_ln708_4_fu_884_p1) + $signed(acc_V_4_05_reg_473));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_176 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln64_fu_696_p2 = ((ap_phi_mux_w_index15_phi_fu_392_p6 == 5'd31) ? 1'b1 : 1'b0);

assign mul_ln1118_20_fu_771_p0 = sext_ln1116_fu_746_p1;

assign mul_ln1118_20_fu_771_p1 = tmp_2_reg_920;

assign mul_ln1118_20_fu_771_p2 = ($signed(mul_ln1118_20_fu_771_p0) * $signed(mul_ln1118_20_fu_771_p1));

assign mul_ln1118_21_fu_790_p0 = sext_ln1116_fu_746_p1;

assign mul_ln1118_21_fu_790_p1 = tmp_3_reg_925;

assign mul_ln1118_21_fu_790_p2 = ($signed(mul_ln1118_21_fu_790_p0) * $signed(mul_ln1118_21_fu_790_p1));

assign mul_ln1118_22_fu_809_p0 = sext_ln1116_fu_746_p1;

assign mul_ln1118_22_fu_809_p1 = tmp_4_reg_930;

assign mul_ln1118_22_fu_809_p2 = ($signed(mul_ln1118_22_fu_809_p0) * $signed(mul_ln1118_22_fu_809_p1));

assign mul_ln1118_23_fu_828_p0 = sext_ln1116_fu_746_p1;

assign mul_ln1118_23_fu_828_p1 = tmp_5_reg_935;

assign mul_ln1118_23_fu_828_p2 = ($signed(mul_ln1118_23_fu_828_p0) * $signed(mul_ln1118_23_fu_828_p1));

assign mul_ln1118_fu_752_p0 = sext_ln1116_fu_746_p1;

assign mul_ln1118_fu_752_p1 = trunc_ln76_reg_915;

assign mul_ln1118_fu_752_p2 = ($signed(mul_ln1118_fu_752_p0) * $signed(mul_ln1118_fu_752_p1));

assign res_0_V = ($signed(sext_ln708_fu_844_p1) + $signed(acc_V_0_013_reg_417));

assign res_1_V = ($signed(sext_ln708_1_fu_854_p1) + $signed(acc_V_1_011_reg_431));

assign res_2_V = ($signed(sext_ln708_2_fu_864_p1) + $signed(acc_V_2_09_reg_445));

assign res_3_V = ($signed(sext_ln708_3_fu_874_p1) + $signed(acc_V_3_07_reg_459));

assign res_4_V = ($signed(sext_ln708_4_fu_884_p1) + $signed(acc_V_4_05_reg_473));

assign sext_ln1116_fu_746_p1 = $signed(tmp_1_reg_896_pp0_iter1_reg);

assign sext_ln708_1_fu_854_p1 = $signed(trunc_ln708_s_reg_945);

assign sext_ln708_2_fu_864_p1 = $signed(trunc_ln708_107_reg_950);

assign sext_ln708_3_fu_874_p1 = $signed(trunc_ln708_108_reg_955);

assign sext_ln708_4_fu_884_p1 = $signed(trunc_ln708_109_reg_960);

assign sext_ln708_fu_844_p1 = $signed(trunc_ln4_reg_940);

assign tmp_1_fu_615_p1 = data_0_V;

assign tmp_1_fu_615_p10 = data_9_V;

assign tmp_1_fu_615_p11 = data_10_V;

assign tmp_1_fu_615_p12 = data_11_V;

assign tmp_1_fu_615_p13 = data_12_V;

assign tmp_1_fu_615_p14 = data_13_V;

assign tmp_1_fu_615_p15 = data_14_V;

assign tmp_1_fu_615_p16 = data_15_V;

assign tmp_1_fu_615_p17 = data_16_V;

assign tmp_1_fu_615_p18 = data_17_V;

assign tmp_1_fu_615_p19 = data_18_V;

assign tmp_1_fu_615_p2 = data_1_V;

assign tmp_1_fu_615_p20 = data_19_V;

assign tmp_1_fu_615_p21 = data_20_V;

assign tmp_1_fu_615_p22 = data_21_V;

assign tmp_1_fu_615_p23 = data_22_V;

assign tmp_1_fu_615_p24 = data_23_V;

assign tmp_1_fu_615_p25 = data_24_V;

assign tmp_1_fu_615_p26 = data_25_V;

assign tmp_1_fu_615_p27 = data_26_V;

assign tmp_1_fu_615_p28 = data_27_V;

assign tmp_1_fu_615_p29 = data_28_V;

assign tmp_1_fu_615_p3 = data_2_V;

assign tmp_1_fu_615_p30 = data_29_V;

assign tmp_1_fu_615_p31 = data_30_V;

assign tmp_1_fu_615_p32 = data_31_V;

assign tmp_1_fu_615_p4 = data_3_V;

assign tmp_1_fu_615_p5 = data_4_V;

assign tmp_1_fu_615_p6 = data_5_V;

assign tmp_1_fu_615_p7 = data_6_V;

assign tmp_1_fu_615_p8 = data_7_V;

assign tmp_1_fu_615_p9 = data_8_V;

assign trunc_ln76_fu_702_p1 = w11_V_q0[6:0];

assign w11_V_address0 = zext_ln76_fu_685_p1;

assign w_index_fu_690_p2 = (5'd1 + ap_phi_mux_w_index15_phi_fu_392_p6);

assign zext_ln76_fu_685_p1 = ap_phi_mux_w_index15_phi_fu_392_p6;

endmodule //dense_resource_2
