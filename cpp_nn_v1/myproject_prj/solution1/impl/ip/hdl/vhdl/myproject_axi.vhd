-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.982000,HLS_SYN_LAT=281,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=21,HLS_SYN_FF=11410,HLS_SYN_LUT=35556,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal in_data_V_val_reg_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal in_data_V_val1_reg_219 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val3_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val5_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val7_reg_234 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val9_reg_239 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val2_reg_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val4_reg_249 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val6_reg_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val8_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val10_reg_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val11_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val12_reg_274 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val13_reg_279 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_data_V_val14_reg_284 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_layer13_out_0_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_layer13_out_1_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_layer13_out_2_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_layer13_out_3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_layer13_out_4_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_102_ap_start : STD_LOGIC;
    signal grp_myproject_fu_102_layer13_out_0_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_102_layer13_out_1_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_102_layer13_out_2_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_102_layer13_out_3_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_102_layer13_out_4_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_102_ap_done : STD_LOGIC;
    signal grp_myproject_fu_102_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_102_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_102_ap_continue : STD_LOGIC;
    signal grp_myproject_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_sync_grp_myproject_fu_102_ap_ready : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_102_ap_done : STD_LOGIC;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_myproject_fu_102_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_myproject_fu_102_ap_done : STD_LOGIC := '0';
    signal in_local_V_fu_58 : STD_LOGIC_VECTOR (255 downto 0);
    signal out_local_0_fu_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_1_fu_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_2_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_3_fu_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_4_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_local_V_1_fu_132_p17 : STD_LOGIC_VECTOR (255 downto 0);
    signal regslice_both_out_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal regslice_both_in_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_in_last_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_in_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_in_last_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_out_last_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_out_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_out_last_U_vld_out : STD_LOGIC;

    component myproject IS
    port (
        fc1_input_V : IN STD_LOGIC_VECTOR (255 downto 0);
        layer13_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        fc1_input_V_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        layer13_out_0_V_ap_vld : OUT STD_LOGIC;
        layer13_out_1_V_ap_vld : OUT STD_LOGIC;
        layer13_out_2_V_ap_vld : OUT STD_LOGIC;
        layer13_out_3_V_ap_vld : OUT STD_LOGIC;
        layer13_out_4_V_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component myproject_axi_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_axi_AXILiteS_s_axi_U : component myproject_axi_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_myproject_fu_102 : component myproject
    port map (
        fc1_input_V => in_local_V_fu_58,
        layer13_out_0_V => grp_myproject_fu_102_layer13_out_0_V,
        layer13_out_1_V => grp_myproject_fu_102_layer13_out_1_V,
        layer13_out_2_V => grp_myproject_fu_102_layer13_out_2_V,
        layer13_out_3_V => grp_myproject_fu_102_layer13_out_3_V,
        layer13_out_4_V => grp_myproject_fu_102_layer13_out_4_V,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        fc1_input_V_ap_vld => ap_const_logic_1,
        ap_start => grp_myproject_fu_102_ap_start,
        layer13_out_0_V_ap_vld => grp_myproject_fu_102_layer13_out_0_V_ap_vld,
        layer13_out_1_V_ap_vld => grp_myproject_fu_102_layer13_out_1_V_ap_vld,
        layer13_out_2_V_ap_vld => grp_myproject_fu_102_layer13_out_2_V_ap_vld,
        layer13_out_3_V_ap_vld => grp_myproject_fu_102_layer13_out_3_V_ap_vld,
        layer13_out_4_V_ap_vld => grp_myproject_fu_102_layer13_out_4_V_ap_vld,
        ap_done => grp_myproject_fu_102_ap_done,
        ap_ready => grp_myproject_fu_102_ap_ready,
        ap_idle => grp_myproject_fu_102_ap_idle,
        ap_continue => grp_myproject_fu_102_ap_continue);

    regslice_both_in_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_V_U_apdone_blk);

    regslice_both_w1_in_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_w1_in_last_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_w1_in_last_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_w1_in_last_U_apdone_blk);

    regslice_both_out_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_V_U_apdone_blk);

    regslice_both_w1_out_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TLAST_int,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_w1_out_last_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_w1_out_last_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_w1_out_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_102_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_102_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_sync_reg_grp_myproject_fu_102_ap_done <= ap_const_logic_0;
                elsif ((grp_myproject_fu_102_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_102_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_102_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_102_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_sync_reg_grp_myproject_fu_102_ap_ready <= ap_const_logic_0;
                elsif ((grp_myproject_fu_102_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_102_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_sync_grp_myproject_fu_102_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
                    grp_myproject_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                in_data_V_val10_reg_264 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                in_data_V_val11_reg_269 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                in_data_V_val12_reg_274 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                in_data_V_val13_reg_279 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                in_data_V_val14_reg_284 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                in_data_V_val1_reg_219 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                in_data_V_val2_reg_244 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                in_data_V_val3_reg_224 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                in_data_V_val4_reg_249 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                in_data_V_val5_reg_229 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                in_data_V_val6_reg_254 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                in_data_V_val7_reg_234 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                in_data_V_val8_reg_259 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                in_data_V_val9_reg_239 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_data_V_val_reg_214 <= in_r_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                in_local_V_fu_58 <= in_local_V_1_fu_132_p17;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_myproject_fu_102_layer13_out_0_V_ap_vld = ap_const_logic_1))) then
                out_local_0_fu_62 <= grp_myproject_fu_102_layer13_out_0_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_myproject_fu_102_layer13_out_1_V_ap_vld = ap_const_logic_1))) then
                out_local_1_fu_66 <= grp_myproject_fu_102_layer13_out_1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_myproject_fu_102_layer13_out_2_V_ap_vld = ap_const_logic_1))) then
                out_local_2_fu_70 <= grp_myproject_fu_102_layer13_out_2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_myproject_fu_102_layer13_out_3_V_ap_vld = ap_const_logic_1))) then
                out_local_3_fu_74 <= grp_myproject_fu_102_layer13_out_3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_myproject_fu_102_layer13_out_4_V_ap_vld = ap_const_logic_1))) then
                out_local_4_fu_78 <= grp_myproject_fu_102_layer13_out_4_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, regslice_both_out_data_V_U_apdone_blk, in_r_TVALID_int, out_r_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((out_r_TREADY_int = ap_const_logic_0) or (regslice_both_out_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, in_r_TVALID_int)
    begin
                ap_block_state1 <= ((in_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(ap_sync_grp_myproject_fu_102_ap_ready, ap_sync_grp_myproject_fu_102_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((ap_sync_grp_myproject_fu_102_ap_ready and ap_sync_grp_myproject_fu_102_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24, regslice_both_out_data_V_U_apdone_blk, out_r_TREADY_int)
    begin
        if ((not(((out_r_TREADY_int = ap_const_logic_0) or (regslice_both_out_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, regslice_both_out_data_V_U_apdone_blk, out_r_TREADY_int)
    begin
        if ((not(((out_r_TREADY_int = ap_const_logic_0) or (regslice_both_out_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_myproject_fu_102_ap_done <= (grp_myproject_fu_102_ap_done or ap_sync_reg_grp_myproject_fu_102_ap_done);
    ap_sync_grp_myproject_fu_102_ap_ready <= (grp_myproject_fu_102_ap_ready or ap_sync_reg_grp_myproject_fu_102_ap_ready);

    grp_myproject_fu_102_ap_continue_assign_proc : process(ap_CS_fsm_state18, ap_block_state18_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_myproject_fu_102_ap_continue <= ap_const_logic_1;
        else 
            grp_myproject_fu_102_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_myproject_fu_102_ap_start <= grp_myproject_fu_102_ap_start_reg;
    in_local_V_1_fu_132_p17 <= (((((((((((((((in_r_TDATA_int & in_data_V_val14_reg_284) & in_data_V_val13_reg_279) & in_data_V_val12_reg_274) & in_data_V_val11_reg_269) & in_data_V_val10_reg_264) & in_data_V_val8_reg_259) & in_data_V_val6_reg_254) & in_data_V_val4_reg_249) & in_data_V_val2_reg_244) & in_data_V_val9_reg_239) & in_data_V_val7_reg_234) & in_data_V_val5_reg_229) & in_data_V_val3_reg_224) & in_data_V_val1_reg_219) & in_data_V_val_reg_214);

    in_r_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, in_r_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_data_V_U_ack_in)
    begin
        if (((regslice_both_in_data_V_U_ack_in = ap_const_logic_1) and (in_r_TVALID = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, in_r_TVALID_int)
    begin
        if ((((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((in_r_TVALID_int = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((in_r_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, out_r_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TDATA_int_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, out_local_0_fu_62, out_local_1_fu_66, out_local_2_fu_70, out_local_3_fu_74, out_local_4_fu_78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_r_TDATA_int <= out_local_4_fu_78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            out_r_TDATA_int <= out_local_3_fu_74;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            out_r_TDATA_int <= out_local_2_fu_70;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_r_TDATA_int <= out_local_1_fu_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_TDATA_int <= out_local_0_fu_62;
        else 
            out_r_TDATA_int <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_TLAST_int_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            out_r_TLAST_int <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            out_r_TLAST_int <= ap_const_logic_0;
        else 
            out_r_TLAST_int <= 'X';
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, out_r_TREADY_int)
    begin
        if ((((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((out_r_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
