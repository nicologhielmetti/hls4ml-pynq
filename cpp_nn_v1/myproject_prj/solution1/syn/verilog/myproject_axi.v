// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.982000,HLS_SYN_LAT=281,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=21,HLS_SYN_FF=11410,HLS_SYN_LUT=35556,HLS_VERSION=2019_2}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input   in_r_TLAST;
output  [15:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output   out_r_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [15:0] in_data_V_val_reg_214;
reg    ap_block_state1;
reg   [15:0] in_data_V_val1_reg_219;
reg   [15:0] in_data_V_val3_reg_224;
reg   [15:0] in_data_V_val5_reg_229;
reg   [15:0] in_data_V_val7_reg_234;
reg   [15:0] in_data_V_val9_reg_239;
reg   [15:0] in_data_V_val2_reg_244;
reg   [15:0] in_data_V_val4_reg_249;
reg   [15:0] in_data_V_val6_reg_254;
reg   [15:0] in_data_V_val8_reg_259;
reg   [15:0] in_data_V_val10_reg_264;
reg   [15:0] in_data_V_val11_reg_269;
reg   [15:0] in_data_V_val12_reg_274;
reg   [15:0] in_data_V_val13_reg_279;
reg   [15:0] in_data_V_val14_reg_284;
wire   [15:0] grp_myproject_fu_102_layer13_out_0_V;
wire   [15:0] grp_myproject_fu_102_layer13_out_1_V;
wire   [15:0] grp_myproject_fu_102_layer13_out_2_V;
wire   [15:0] grp_myproject_fu_102_layer13_out_3_V;
wire   [15:0] grp_myproject_fu_102_layer13_out_4_V;
wire    grp_myproject_fu_102_ap_start;
wire    grp_myproject_fu_102_layer13_out_0_V_ap_vld;
wire    grp_myproject_fu_102_layer13_out_1_V_ap_vld;
wire    grp_myproject_fu_102_layer13_out_2_V_ap_vld;
wire    grp_myproject_fu_102_layer13_out_3_V_ap_vld;
wire    grp_myproject_fu_102_layer13_out_4_V_ap_vld;
wire    grp_myproject_fu_102_ap_done;
wire    grp_myproject_fu_102_ap_ready;
wire    grp_myproject_fu_102_ap_idle;
reg    grp_myproject_fu_102_ap_continue;
reg    grp_myproject_fu_102_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_sync_grp_myproject_fu_102_ap_ready;
wire    ap_sync_grp_myproject_fu_102_ap_done;
reg    ap_block_state18_on_subcall_done;
reg    ap_sync_reg_grp_myproject_fu_102_ap_ready;
reg    ap_sync_reg_grp_myproject_fu_102_ap_done;
reg   [255:0] in_local_V_fu_58;
reg   [15:0] out_local_0_fu_62;
reg   [15:0] out_local_1_fu_66;
reg   [15:0] out_local_2_fu_70;
reg   [15:0] out_local_3_fu_74;
reg   [15:0] out_local_4_fu_78;
wire   [255:0] in_local_V_1_fu_132_p17;
wire    regslice_both_out_data_V_U_apdone_blk;
reg   [23:0] ap_NS_fsm;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [15:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_data_V_U_ack_in;
wire    regslice_both_w1_in_last_U_apdone_blk;
wire    in_r_TLAST_int;
wire    regslice_both_w1_in_last_U_vld_out;
wire    regslice_both_w1_in_last_U_ack_in;
reg   [15:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_V_U_vld_out;
wire    regslice_both_w1_out_last_U_apdone_blk;
reg    out_r_TLAST_int;
wire    regslice_both_w1_out_last_U_ack_in_dummy;
wire    regslice_both_w1_out_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_myproject_fu_102_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_102_ap_ready = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_102_ap_done = 1'b0;
end

myproject_axi_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
myproject_axi_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

myproject grp_myproject_fu_102(
    .fc1_input_V(in_local_V_fu_58),
    .layer13_out_0_V(grp_myproject_fu_102_layer13_out_0_V),
    .layer13_out_1_V(grp_myproject_fu_102_layer13_out_1_V),
    .layer13_out_2_V(grp_myproject_fu_102_layer13_out_2_V),
    .layer13_out_3_V(grp_myproject_fu_102_layer13_out_3_V),
    .layer13_out_4_V(grp_myproject_fu_102_layer13_out_4_V),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .fc1_input_V_ap_vld(1'b1),
    .ap_start(grp_myproject_fu_102_ap_start),
    .layer13_out_0_V_ap_vld(grp_myproject_fu_102_layer13_out_0_V_ap_vld),
    .layer13_out_1_V_ap_vld(grp_myproject_fu_102_layer13_out_1_V_ap_vld),
    .layer13_out_2_V_ap_vld(grp_myproject_fu_102_layer13_out_2_V_ap_vld),
    .layer13_out_3_V_ap_vld(grp_myproject_fu_102_layer13_out_3_V_ap_vld),
    .layer13_out_4_V_ap_vld(grp_myproject_fu_102_layer13_out_4_V_ap_vld),
    .ap_done(grp_myproject_fu_102_ap_done),
    .ap_ready(grp_myproject_fu_102_ap_ready),
    .ap_idle(grp_myproject_fu_102_ap_idle),
    .ap_continue(grp_myproject_fu_102_ap_continue)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_in_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_w1_in_last_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_w1_in_last_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_w1_in_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_out_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TLAST_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_w1_out_last_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_w1_out_last_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_w1_out_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_102_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_sync_reg_grp_myproject_fu_102_ap_done <= 1'b0;
        end else if ((grp_myproject_fu_102_ap_done == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_102_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_102_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_sync_reg_grp_myproject_fu_102_ap_ready <= 1'b0;
        end else if ((grp_myproject_fu_102_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_102_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_102_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) | ((ap_sync_grp_myproject_fu_102_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state18)))) begin
            grp_myproject_fu_102_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_102_ap_ready == 1'b1)) begin
            grp_myproject_fu_102_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        in_data_V_val10_reg_264 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        in_data_V_val11_reg_269 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        in_data_V_val12_reg_274 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        in_data_V_val13_reg_279 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        in_data_V_val14_reg_284 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_data_V_val1_reg_219 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        in_data_V_val2_reg_244 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_data_V_val3_reg_224 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        in_data_V_val4_reg_249 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_data_V_val5_reg_229 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        in_data_V_val6_reg_254 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_data_V_val7_reg_234 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        in_data_V_val8_reg_259 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        in_data_V_val9_reg_239 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_data_V_val_reg_214 <= in_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        in_local_V_fu_58 <= in_local_V_1_fu_132_p17;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_myproject_fu_102_layer13_out_0_V_ap_vld == 1'b1))) begin
        out_local_0_fu_62 <= grp_myproject_fu_102_layer13_out_0_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_myproject_fu_102_layer13_out_1_V_ap_vld == 1'b1))) begin
        out_local_1_fu_66 <= grp_myproject_fu_102_layer13_out_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_myproject_fu_102_layer13_out_2_V_ap_vld == 1'b1))) begin
        out_local_2_fu_70 <= grp_myproject_fu_102_layer13_out_2_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_myproject_fu_102_layer13_out_3_V_ap_vld == 1'b1))) begin
        out_local_3_fu_74 <= grp_myproject_fu_102_layer13_out_3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_myproject_fu_102_layer13_out_4_V_ap_vld == 1'b1))) begin
        out_local_4_fu_78 <= grp_myproject_fu_102_layer13_out_4_V;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state24))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        grp_myproject_fu_102_ap_continue = 1'b1;
    end else begin
        grp_myproject_fu_102_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_data_V_U_ack_in == 1'b1) & (in_r_TVALID == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((in_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_r_TDATA_int = out_local_4_fu_78;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        out_r_TDATA_int = out_local_3_fu_74;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        out_r_TDATA_int = out_local_2_fu_70;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        out_r_TDATA_int = out_local_1_fu_66;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        out_r_TDATA_int = out_local_0_fu_62;
    end else begin
        out_r_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        out_r_TLAST_int = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        out_r_TLAST_int = 1'd0;
    end else begin
        out_r_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_r_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((in_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((out_r_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((out_r_TREADY_int == 1'b0) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((in_r_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state18_on_subcall_done = ((ap_sync_grp_myproject_fu_102_ap_ready & ap_sync_grp_myproject_fu_102_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_myproject_fu_102_ap_done = (grp_myproject_fu_102_ap_done | ap_sync_reg_grp_myproject_fu_102_ap_done);

assign ap_sync_grp_myproject_fu_102_ap_ready = (grp_myproject_fu_102_ap_ready | ap_sync_reg_grp_myproject_fu_102_ap_ready);

assign grp_myproject_fu_102_ap_start = grp_myproject_fu_102_ap_start_reg;

assign in_local_V_1_fu_132_p17 = {{{{{{{{{{{{{{{{in_r_TDATA_int}, {in_data_V_val14_reg_284}}, {in_data_V_val13_reg_279}}, {in_data_V_val12_reg_274}}, {in_data_V_val11_reg_269}}, {in_data_V_val10_reg_264}}, {in_data_V_val8_reg_259}}, {in_data_V_val6_reg_254}}, {in_data_V_val4_reg_249}}, {in_data_V_val2_reg_244}}, {in_data_V_val9_reg_239}}, {in_data_V_val7_reg_234}}, {in_data_V_val5_reg_229}}, {in_data_V_val3_reg_224}}, {in_data_V_val1_reg_219}}, {in_data_V_val_reg_214}};

assign out_r_TVALID = regslice_both_out_data_V_U_vld_out;

endmodule //myproject_axi
