// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_array_ap_fixed_16_6_5_3_0_32u_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        data_stream_V_data_8_V_dout,
        data_stream_V_data_8_V_empty_n,
        data_stream_V_data_8_V_read,
        data_stream_V_data_9_V_dout,
        data_stream_V_data_9_V_empty_n,
        data_stream_V_data_9_V_read,
        data_stream_V_data_10_V_dout,
        data_stream_V_data_10_V_empty_n,
        data_stream_V_data_10_V_read,
        data_stream_V_data_11_V_dout,
        data_stream_V_data_11_V_empty_n,
        data_stream_V_data_11_V_read,
        data_stream_V_data_12_V_dout,
        data_stream_V_data_12_V_empty_n,
        data_stream_V_data_12_V_read,
        data_stream_V_data_13_V_dout,
        data_stream_V_data_13_V_empty_n,
        data_stream_V_data_13_V_read,
        data_stream_V_data_14_V_dout,
        data_stream_V_data_14_V_empty_n,
        data_stream_V_data_14_V_read,
        data_stream_V_data_15_V_dout,
        data_stream_V_data_15_V_empty_n,
        data_stream_V_data_15_V_read,
        data_stream_V_data_16_V_dout,
        data_stream_V_data_16_V_empty_n,
        data_stream_V_data_16_V_read,
        data_stream_V_data_17_V_dout,
        data_stream_V_data_17_V_empty_n,
        data_stream_V_data_17_V_read,
        data_stream_V_data_18_V_dout,
        data_stream_V_data_18_V_empty_n,
        data_stream_V_data_18_V_read,
        data_stream_V_data_19_V_dout,
        data_stream_V_data_19_V_empty_n,
        data_stream_V_data_19_V_read,
        data_stream_V_data_20_V_dout,
        data_stream_V_data_20_V_empty_n,
        data_stream_V_data_20_V_read,
        data_stream_V_data_21_V_dout,
        data_stream_V_data_21_V_empty_n,
        data_stream_V_data_21_V_read,
        data_stream_V_data_22_V_dout,
        data_stream_V_data_22_V_empty_n,
        data_stream_V_data_22_V_read,
        data_stream_V_data_23_V_dout,
        data_stream_V_data_23_V_empty_n,
        data_stream_V_data_23_V_read,
        data_stream_V_data_24_V_dout,
        data_stream_V_data_24_V_empty_n,
        data_stream_V_data_24_V_read,
        data_stream_V_data_25_V_dout,
        data_stream_V_data_25_V_empty_n,
        data_stream_V_data_25_V_read,
        data_stream_V_data_26_V_dout,
        data_stream_V_data_26_V_empty_n,
        data_stream_V_data_26_V_read,
        data_stream_V_data_27_V_dout,
        data_stream_V_data_27_V_empty_n,
        data_stream_V_data_27_V_read,
        data_stream_V_data_28_V_dout,
        data_stream_V_data_28_V_empty_n,
        data_stream_V_data_28_V_read,
        data_stream_V_data_29_V_dout,
        data_stream_V_data_29_V_empty_n,
        data_stream_V_data_29_V_read,
        data_stream_V_data_30_V_dout,
        data_stream_V_data_30_V_empty_n,
        data_stream_V_data_30_V_read,
        data_stream_V_data_31_V_dout,
        data_stream_V_data_31_V_empty_n,
        data_stream_V_data_31_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write,
        res_stream_V_data_16_V_din,
        res_stream_V_data_16_V_full_n,
        res_stream_V_data_16_V_write,
        res_stream_V_data_17_V_din,
        res_stream_V_data_17_V_full_n,
        res_stream_V_data_17_V_write,
        res_stream_V_data_18_V_din,
        res_stream_V_data_18_V_full_n,
        res_stream_V_data_18_V_write,
        res_stream_V_data_19_V_din,
        res_stream_V_data_19_V_full_n,
        res_stream_V_data_19_V_write,
        res_stream_V_data_20_V_din,
        res_stream_V_data_20_V_full_n,
        res_stream_V_data_20_V_write,
        res_stream_V_data_21_V_din,
        res_stream_V_data_21_V_full_n,
        res_stream_V_data_21_V_write,
        res_stream_V_data_22_V_din,
        res_stream_V_data_22_V_full_n,
        res_stream_V_data_22_V_write,
        res_stream_V_data_23_V_din,
        res_stream_V_data_23_V_full_n,
        res_stream_V_data_23_V_write,
        res_stream_V_data_24_V_din,
        res_stream_V_data_24_V_full_n,
        res_stream_V_data_24_V_write,
        res_stream_V_data_25_V_din,
        res_stream_V_data_25_V_full_n,
        res_stream_V_data_25_V_write,
        res_stream_V_data_26_V_din,
        res_stream_V_data_26_V_full_n,
        res_stream_V_data_26_V_write,
        res_stream_V_data_27_V_din,
        res_stream_V_data_27_V_full_n,
        res_stream_V_data_27_V_write,
        res_stream_V_data_28_V_din,
        res_stream_V_data_28_V_full_n,
        res_stream_V_data_28_V_write,
        res_stream_V_data_29_V_din,
        res_stream_V_data_29_V_full_n,
        res_stream_V_data_29_V_write,
        res_stream_V_data_30_V_din,
        res_stream_V_data_30_V_full_n,
        res_stream_V_data_30_V_write,
        res_stream_V_data_31_V_din,
        res_stream_V_data_31_V_full_n,
        res_stream_V_data_31_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [6:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [6:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [6:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [6:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [6:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [6:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [6:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [6:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
input  [6:0] data_stream_V_data_8_V_dout;
input   data_stream_V_data_8_V_empty_n;
output   data_stream_V_data_8_V_read;
input  [6:0] data_stream_V_data_9_V_dout;
input   data_stream_V_data_9_V_empty_n;
output   data_stream_V_data_9_V_read;
input  [6:0] data_stream_V_data_10_V_dout;
input   data_stream_V_data_10_V_empty_n;
output   data_stream_V_data_10_V_read;
input  [6:0] data_stream_V_data_11_V_dout;
input   data_stream_V_data_11_V_empty_n;
output   data_stream_V_data_11_V_read;
input  [6:0] data_stream_V_data_12_V_dout;
input   data_stream_V_data_12_V_empty_n;
output   data_stream_V_data_12_V_read;
input  [6:0] data_stream_V_data_13_V_dout;
input   data_stream_V_data_13_V_empty_n;
output   data_stream_V_data_13_V_read;
input  [6:0] data_stream_V_data_14_V_dout;
input   data_stream_V_data_14_V_empty_n;
output   data_stream_V_data_14_V_read;
input  [6:0] data_stream_V_data_15_V_dout;
input   data_stream_V_data_15_V_empty_n;
output   data_stream_V_data_15_V_read;
input  [6:0] data_stream_V_data_16_V_dout;
input   data_stream_V_data_16_V_empty_n;
output   data_stream_V_data_16_V_read;
input  [6:0] data_stream_V_data_17_V_dout;
input   data_stream_V_data_17_V_empty_n;
output   data_stream_V_data_17_V_read;
input  [6:0] data_stream_V_data_18_V_dout;
input   data_stream_V_data_18_V_empty_n;
output   data_stream_V_data_18_V_read;
input  [6:0] data_stream_V_data_19_V_dout;
input   data_stream_V_data_19_V_empty_n;
output   data_stream_V_data_19_V_read;
input  [6:0] data_stream_V_data_20_V_dout;
input   data_stream_V_data_20_V_empty_n;
output   data_stream_V_data_20_V_read;
input  [6:0] data_stream_V_data_21_V_dout;
input   data_stream_V_data_21_V_empty_n;
output   data_stream_V_data_21_V_read;
input  [6:0] data_stream_V_data_22_V_dout;
input   data_stream_V_data_22_V_empty_n;
output   data_stream_V_data_22_V_read;
input  [6:0] data_stream_V_data_23_V_dout;
input   data_stream_V_data_23_V_empty_n;
output   data_stream_V_data_23_V_read;
input  [6:0] data_stream_V_data_24_V_dout;
input   data_stream_V_data_24_V_empty_n;
output   data_stream_V_data_24_V_read;
input  [6:0] data_stream_V_data_25_V_dout;
input   data_stream_V_data_25_V_empty_n;
output   data_stream_V_data_25_V_read;
input  [6:0] data_stream_V_data_26_V_dout;
input   data_stream_V_data_26_V_empty_n;
output   data_stream_V_data_26_V_read;
input  [6:0] data_stream_V_data_27_V_dout;
input   data_stream_V_data_27_V_empty_n;
output   data_stream_V_data_27_V_read;
input  [6:0] data_stream_V_data_28_V_dout;
input   data_stream_V_data_28_V_empty_n;
output   data_stream_V_data_28_V_read;
input  [6:0] data_stream_V_data_29_V_dout;
input   data_stream_V_data_29_V_empty_n;
output   data_stream_V_data_29_V_read;
input  [6:0] data_stream_V_data_30_V_dout;
input   data_stream_V_data_30_V_empty_n;
output   data_stream_V_data_30_V_read;
input  [6:0] data_stream_V_data_31_V_dout;
input   data_stream_V_data_31_V_empty_n;
output   data_stream_V_data_31_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;
output  [15:0] res_stream_V_data_16_V_din;
input   res_stream_V_data_16_V_full_n;
output   res_stream_V_data_16_V_write;
output  [15:0] res_stream_V_data_17_V_din;
input   res_stream_V_data_17_V_full_n;
output   res_stream_V_data_17_V_write;
output  [15:0] res_stream_V_data_18_V_din;
input   res_stream_V_data_18_V_full_n;
output   res_stream_V_data_18_V_write;
output  [15:0] res_stream_V_data_19_V_din;
input   res_stream_V_data_19_V_full_n;
output   res_stream_V_data_19_V_write;
output  [15:0] res_stream_V_data_20_V_din;
input   res_stream_V_data_20_V_full_n;
output   res_stream_V_data_20_V_write;
output  [15:0] res_stream_V_data_21_V_din;
input   res_stream_V_data_21_V_full_n;
output   res_stream_V_data_21_V_write;
output  [15:0] res_stream_V_data_22_V_din;
input   res_stream_V_data_22_V_full_n;
output   res_stream_V_data_22_V_write;
output  [15:0] res_stream_V_data_23_V_din;
input   res_stream_V_data_23_V_full_n;
output   res_stream_V_data_23_V_write;
output  [15:0] res_stream_V_data_24_V_din;
input   res_stream_V_data_24_V_full_n;
output   res_stream_V_data_24_V_write;
output  [15:0] res_stream_V_data_25_V_din;
input   res_stream_V_data_25_V_full_n;
output   res_stream_V_data_25_V_write;
output  [15:0] res_stream_V_data_26_V_din;
input   res_stream_V_data_26_V_full_n;
output   res_stream_V_data_26_V_write;
output  [15:0] res_stream_V_data_27_V_din;
input   res_stream_V_data_27_V_full_n;
output   res_stream_V_data_27_V_write;
output  [15:0] res_stream_V_data_28_V_din;
input   res_stream_V_data_28_V_full_n;
output   res_stream_V_data_28_V_write;
output  [15:0] res_stream_V_data_29_V_din;
input   res_stream_V_data_29_V_full_n;
output   res_stream_V_data_29_V_write;
output  [15:0] res_stream_V_data_30_V_din;
input   res_stream_V_data_30_V_full_n;
output   res_stream_V_data_30_V_write;
output  [15:0] res_stream_V_data_31_V_din;
input   res_stream_V_data_31_V_full_n;
output   res_stream_V_data_31_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg data_stream_V_data_8_V_read;
reg data_stream_V_data_9_V_read;
reg data_stream_V_data_10_V_read;
reg data_stream_V_data_11_V_read;
reg data_stream_V_data_12_V_read;
reg data_stream_V_data_13_V_read;
reg data_stream_V_data_14_V_read;
reg data_stream_V_data_15_V_read;
reg data_stream_V_data_16_V_read;
reg data_stream_V_data_17_V_read;
reg data_stream_V_data_18_V_read;
reg data_stream_V_data_19_V_read;
reg data_stream_V_data_20_V_read;
reg data_stream_V_data_21_V_read;
reg data_stream_V_data_22_V_read;
reg data_stream_V_data_23_V_read;
reg data_stream_V_data_24_V_read;
reg data_stream_V_data_25_V_read;
reg data_stream_V_data_26_V_read;
reg data_stream_V_data_27_V_read;
reg data_stream_V_data_28_V_read;
reg data_stream_V_data_29_V_read;
reg data_stream_V_data_30_V_read;
reg data_stream_V_data_31_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;
reg res_stream_V_data_16_V_write;
reg res_stream_V_data_17_V_write;
reg res_stream_V_data_18_V_write;
reg res_stream_V_data_19_V_write;
reg res_stream_V_data_20_V_write;
reg res_stream_V_data_21_V_write;
reg res_stream_V_data_22_V_write;
reg res_stream_V_data_23_V_write;
reg res_stream_V_data_24_V_write;
reg res_stream_V_data_25_V_write;
reg res_stream_V_data_26_V_write;
reg res_stream_V_data_27_V_write;
reg res_stream_V_data_28_V_write;
reg res_stream_V_data_29_V_write;
reg res_stream_V_data_30_V_write;
reg res_stream_V_data_31_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    data_stream_V_data_8_V_blk_n;
reg    data_stream_V_data_9_V_blk_n;
reg    data_stream_V_data_10_V_blk_n;
reg    data_stream_V_data_11_V_blk_n;
reg    data_stream_V_data_12_V_blk_n;
reg    data_stream_V_data_13_V_blk_n;
reg    data_stream_V_data_14_V_blk_n;
reg    data_stream_V_data_15_V_blk_n;
reg    data_stream_V_data_16_V_blk_n;
reg    data_stream_V_data_17_V_blk_n;
reg    data_stream_V_data_18_V_blk_n;
reg    data_stream_V_data_19_V_blk_n;
reg    data_stream_V_data_20_V_blk_n;
reg    data_stream_V_data_21_V_blk_n;
reg    data_stream_V_data_22_V_blk_n;
reg    data_stream_V_data_23_V_blk_n;
reg    data_stream_V_data_24_V_blk_n;
reg    data_stream_V_data_25_V_blk_n;
reg    data_stream_V_data_26_V_blk_n;
reg    data_stream_V_data_27_V_blk_n;
reg    data_stream_V_data_28_V_blk_n;
reg    data_stream_V_data_29_V_blk_n;
reg    data_stream_V_data_30_V_blk_n;
reg    data_stream_V_data_31_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg    res_stream_V_data_16_V_blk_n;
reg    res_stream_V_data_17_V_blk_n;
reg    res_stream_V_data_18_V_blk_n;
reg    res_stream_V_data_19_V_blk_n;
reg    res_stream_V_data_20_V_blk_n;
reg    res_stream_V_data_21_V_blk_n;
reg    res_stream_V_data_22_V_blk_n;
reg    res_stream_V_data_23_V_blk_n;
reg    res_stream_V_data_24_V_blk_n;
reg    res_stream_V_data_25_V_blk_n;
reg    res_stream_V_data_26_V_blk_n;
reg    res_stream_V_data_27_V_blk_n;
reg    res_stream_V_data_28_V_blk_n;
reg    res_stream_V_data_29_V_blk_n;
reg    res_stream_V_data_30_V_blk_n;
reg    res_stream_V_data_31_V_blk_n;
wire    io_acc_block_signal_op4;
reg    ap_block_state1;
reg   [15:0] tmp_data_0_V_reg_1580;
wire    ap_CS_fsm_state2;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_ready;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_done;
reg   [15:0] tmp_data_1_V_reg_1585;
reg   [15:0] tmp_data_2_V_reg_1590;
reg   [15:0] tmp_data_3_V_reg_1595;
reg   [15:0] tmp_data_4_V_reg_1600;
reg   [15:0] tmp_data_5_V_reg_1605;
reg   [15:0] tmp_data_6_V_reg_1610;
reg   [15:0] tmp_data_7_V_reg_1615;
reg   [15:0] tmp_data_8_V_reg_1620;
reg   [15:0] tmp_data_9_V_reg_1625;
reg   [15:0] tmp_data_10_V_reg_1630;
reg   [15:0] tmp_data_11_V_reg_1635;
reg   [15:0] tmp_data_12_V_reg_1640;
reg   [15:0] tmp_data_13_V_reg_1645;
reg   [15:0] tmp_data_14_V_reg_1650;
reg   [15:0] tmp_data_15_V_reg_1655;
reg   [15:0] tmp_data_16_V_reg_1660;
reg   [15:0] tmp_data_17_V_reg_1665;
reg   [15:0] tmp_data_18_V_reg_1670;
reg   [15:0] tmp_data_19_V_reg_1675;
reg   [15:0] tmp_data_20_V_reg_1680;
reg   [15:0] tmp_data_21_V_reg_1685;
reg   [15:0] tmp_data_22_V_reg_1690;
reg   [15:0] tmp_data_23_V_reg_1695;
reg   [15:0] tmp_data_24_V_reg_1700;
reg   [15:0] tmp_data_25_V_reg_1705;
reg   [15:0] tmp_data_26_V_reg_1710;
reg   [15:0] tmp_data_27_V_reg_1715;
reg   [15:0] tmp_data_28_V_reg_1720;
reg   [15:0] tmp_data_29_V_reg_1725;
reg   [15:0] tmp_data_30_V_reg_1730;
reg   [15:0] tmp_data_31_V_reg_1735;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start;
wire    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_idle;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_15;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_16;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_17;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_18;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_19;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_20;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_21;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_22;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_23;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_24;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_25;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_26;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_27;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_28;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_29;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_30;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_31;
reg    grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg;
reg    ap_block_state1_ignore_call100;
wire    io_acc_block_signal_op139;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg = 1'b0;
end

dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start),
    .ap_done(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_done),
    .ap_idle(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_ready),
    .data_0_V_read(data_stream_V_data_0_V_dout),
    .data_1_V_read(data_stream_V_data_1_V_dout),
    .data_2_V_read(data_stream_V_data_2_V_dout),
    .data_3_V_read(data_stream_V_data_3_V_dout),
    .data_4_V_read(data_stream_V_data_4_V_dout),
    .data_5_V_read(data_stream_V_data_5_V_dout),
    .data_6_V_read(data_stream_V_data_6_V_dout),
    .data_7_V_read(data_stream_V_data_7_V_dout),
    .data_8_V_read(data_stream_V_data_8_V_dout),
    .data_9_V_read(data_stream_V_data_9_V_dout),
    .data_10_V_read(data_stream_V_data_10_V_dout),
    .data_11_V_read(data_stream_V_data_11_V_dout),
    .data_12_V_read(data_stream_V_data_12_V_dout),
    .data_13_V_read(data_stream_V_data_13_V_dout),
    .data_14_V_read(data_stream_V_data_14_V_dout),
    .data_15_V_read(data_stream_V_data_15_V_dout),
    .data_16_V_read(data_stream_V_data_16_V_dout),
    .data_17_V_read(data_stream_V_data_17_V_dout),
    .data_18_V_read(data_stream_V_data_18_V_dout),
    .data_19_V_read(data_stream_V_data_19_V_dout),
    .data_20_V_read(data_stream_V_data_20_V_dout),
    .data_21_V_read(data_stream_V_data_21_V_dout),
    .data_22_V_read(data_stream_V_data_22_V_dout),
    .data_23_V_read(data_stream_V_data_23_V_dout),
    .data_24_V_read(data_stream_V_data_24_V_dout),
    .data_25_V_read(data_stream_V_data_25_V_dout),
    .data_26_V_read(data_stream_V_data_26_V_dout),
    .data_27_V_read(data_stream_V_data_27_V_dout),
    .data_28_V_read(data_stream_V_data_28_V_dout),
    .data_29_V_read(data_stream_V_data_29_V_dout),
    .data_30_V_read(data_stream_V_data_30_V_dout),
    .data_31_V_read(data_stream_V_data_31_V_dout),
    .ap_return_0(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_15),
    .ap_return_16(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_16),
    .ap_return_17(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_17),
    .ap_return_18(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_18),
    .ap_return_19(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_19),
    .ap_return_20(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_20),
    .ap_return_21(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_21),
    .ap_return_22(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_22),
    .ap_return_23(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_23),
    .ap_return_24(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_24),
    .ap_return_25(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_25),
    .ap_return_26(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_26),
    .ap_return_27(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_27),
    .ap_return_28(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_28),
    .ap_return_29(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_29),
    .ap_return_30(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_30),
    .ap_return_31(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_31)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_0_V_reg_1580 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_0;
        tmp_data_10_V_reg_1630 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_10;
        tmp_data_11_V_reg_1635 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_11;
        tmp_data_12_V_reg_1640 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_12;
        tmp_data_13_V_reg_1645 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_13;
        tmp_data_14_V_reg_1650 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_14;
        tmp_data_15_V_reg_1655 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_15;
        tmp_data_16_V_reg_1660 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_16;
        tmp_data_17_V_reg_1665 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_17;
        tmp_data_18_V_reg_1670 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_18;
        tmp_data_19_V_reg_1675 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_19;
        tmp_data_1_V_reg_1585 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_1;
        tmp_data_20_V_reg_1680 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_20;
        tmp_data_21_V_reg_1685 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_21;
        tmp_data_22_V_reg_1690 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_22;
        tmp_data_23_V_reg_1695 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_23;
        tmp_data_24_V_reg_1700 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_24;
        tmp_data_25_V_reg_1705 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_25;
        tmp_data_26_V_reg_1710 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_26;
        tmp_data_27_V_reg_1715 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_27;
        tmp_data_28_V_reg_1720 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_28;
        tmp_data_29_V_reg_1725 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_29;
        tmp_data_2_V_reg_1590 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_2;
        tmp_data_30_V_reg_1730 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_30;
        tmp_data_31_V_reg_1735 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_31;
        tmp_data_3_V_reg_1595 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_3;
        tmp_data_4_V_reg_1600 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_4;
        tmp_data_5_V_reg_1605 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_5;
        tmp_data_6_V_reg_1610 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_6;
        tmp_data_7_V_reg_1615 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_7;
        tmp_data_8_V_reg_1620 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_8;
        tmp_data_9_V_reg_1625 <= grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_return_9;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_10_V_blk_n = data_stream_V_data_10_V_empty_n;
    end else begin
        data_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_10_V_read = 1'b1;
    end else begin
        data_stream_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_11_V_blk_n = data_stream_V_data_11_V_empty_n;
    end else begin
        data_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_11_V_read = 1'b1;
    end else begin
        data_stream_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_12_V_blk_n = data_stream_V_data_12_V_empty_n;
    end else begin
        data_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_12_V_read = 1'b1;
    end else begin
        data_stream_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_13_V_blk_n = data_stream_V_data_13_V_empty_n;
    end else begin
        data_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_13_V_read = 1'b1;
    end else begin
        data_stream_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_14_V_blk_n = data_stream_V_data_14_V_empty_n;
    end else begin
        data_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_14_V_read = 1'b1;
    end else begin
        data_stream_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_15_V_blk_n = data_stream_V_data_15_V_empty_n;
    end else begin
        data_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_15_V_read = 1'b1;
    end else begin
        data_stream_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_16_V_blk_n = data_stream_V_data_16_V_empty_n;
    end else begin
        data_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_16_V_read = 1'b1;
    end else begin
        data_stream_V_data_16_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_17_V_blk_n = data_stream_V_data_17_V_empty_n;
    end else begin
        data_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_17_V_read = 1'b1;
    end else begin
        data_stream_V_data_17_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_18_V_blk_n = data_stream_V_data_18_V_empty_n;
    end else begin
        data_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_18_V_read = 1'b1;
    end else begin
        data_stream_V_data_18_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_19_V_blk_n = data_stream_V_data_19_V_empty_n;
    end else begin
        data_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_19_V_read = 1'b1;
    end else begin
        data_stream_V_data_19_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_20_V_blk_n = data_stream_V_data_20_V_empty_n;
    end else begin
        data_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_20_V_read = 1'b1;
    end else begin
        data_stream_V_data_20_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_21_V_blk_n = data_stream_V_data_21_V_empty_n;
    end else begin
        data_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_21_V_read = 1'b1;
    end else begin
        data_stream_V_data_21_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_22_V_blk_n = data_stream_V_data_22_V_empty_n;
    end else begin
        data_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_22_V_read = 1'b1;
    end else begin
        data_stream_V_data_22_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_23_V_blk_n = data_stream_V_data_23_V_empty_n;
    end else begin
        data_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_23_V_read = 1'b1;
    end else begin
        data_stream_V_data_23_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_24_V_blk_n = data_stream_V_data_24_V_empty_n;
    end else begin
        data_stream_V_data_24_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_24_V_read = 1'b1;
    end else begin
        data_stream_V_data_24_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_25_V_blk_n = data_stream_V_data_25_V_empty_n;
    end else begin
        data_stream_V_data_25_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_25_V_read = 1'b1;
    end else begin
        data_stream_V_data_25_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_26_V_blk_n = data_stream_V_data_26_V_empty_n;
    end else begin
        data_stream_V_data_26_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_26_V_read = 1'b1;
    end else begin
        data_stream_V_data_26_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_27_V_blk_n = data_stream_V_data_27_V_empty_n;
    end else begin
        data_stream_V_data_27_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_27_V_read = 1'b1;
    end else begin
        data_stream_V_data_27_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_28_V_blk_n = data_stream_V_data_28_V_empty_n;
    end else begin
        data_stream_V_data_28_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_28_V_read = 1'b1;
    end else begin
        data_stream_V_data_28_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_29_V_blk_n = data_stream_V_data_29_V_empty_n;
    end else begin
        data_stream_V_data_29_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_29_V_read = 1'b1;
    end else begin
        data_stream_V_data_29_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_30_V_blk_n = data_stream_V_data_30_V_empty_n;
    end else begin
        data_stream_V_data_30_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_30_V_read = 1'b1;
    end else begin
        data_stream_V_data_30_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_31_V_blk_n = data_stream_V_data_31_V_empty_n;
    end else begin
        data_stream_V_data_31_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_31_V_read = 1'b1;
    end else begin
        data_stream_V_data_31_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_8_V_blk_n = data_stream_V_data_8_V_empty_n;
    end else begin
        data_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_8_V_read = 1'b1;
    end else begin
        data_stream_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_9_V_blk_n = data_stream_V_data_9_V_empty_n;
    end else begin
        data_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_stream_V_data_9_V_read = 1'b1;
    end else begin
        data_stream_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_16_V_blk_n = res_stream_V_data_16_V_full_n;
    end else begin
        res_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_16_V_write = 1'b1;
    end else begin
        res_stream_V_data_16_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_17_V_blk_n = res_stream_V_data_17_V_full_n;
    end else begin
        res_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_17_V_write = 1'b1;
    end else begin
        res_stream_V_data_17_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_18_V_blk_n = res_stream_V_data_18_V_full_n;
    end else begin
        res_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_18_V_write = 1'b1;
    end else begin
        res_stream_V_data_18_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_19_V_blk_n = res_stream_V_data_19_V_full_n;
    end else begin
        res_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_19_V_write = 1'b1;
    end else begin
        res_stream_V_data_19_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_20_V_blk_n = res_stream_V_data_20_V_full_n;
    end else begin
        res_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_20_V_write = 1'b1;
    end else begin
        res_stream_V_data_20_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_21_V_blk_n = res_stream_V_data_21_V_full_n;
    end else begin
        res_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_21_V_write = 1'b1;
    end else begin
        res_stream_V_data_21_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_22_V_blk_n = res_stream_V_data_22_V_full_n;
    end else begin
        res_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_22_V_write = 1'b1;
    end else begin
        res_stream_V_data_22_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_23_V_blk_n = res_stream_V_data_23_V_full_n;
    end else begin
        res_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_23_V_write = 1'b1;
    end else begin
        res_stream_V_data_23_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_24_V_blk_n = res_stream_V_data_24_V_full_n;
    end else begin
        res_stream_V_data_24_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_24_V_write = 1'b1;
    end else begin
        res_stream_V_data_24_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_25_V_blk_n = res_stream_V_data_25_V_full_n;
    end else begin
        res_stream_V_data_25_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_25_V_write = 1'b1;
    end else begin
        res_stream_V_data_25_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_26_V_blk_n = res_stream_V_data_26_V_full_n;
    end else begin
        res_stream_V_data_26_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_26_V_write = 1'b1;
    end else begin
        res_stream_V_data_26_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_27_V_blk_n = res_stream_V_data_27_V_full_n;
    end else begin
        res_stream_V_data_27_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_27_V_write = 1'b1;
    end else begin
        res_stream_V_data_27_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_28_V_blk_n = res_stream_V_data_28_V_full_n;
    end else begin
        res_stream_V_data_28_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_28_V_write = 1'b1;
    end else begin
        res_stream_V_data_28_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_29_V_blk_n = res_stream_V_data_29_V_full_n;
    end else begin
        res_stream_V_data_29_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_29_V_write = 1'b1;
    end else begin
        res_stream_V_data_29_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_30_V_blk_n = res_stream_V_data_30_V_full_n;
    end else begin
        res_stream_V_data_30_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_30_V_write = 1'b1;
    end else begin
        res_stream_V_data_30_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_31_V_blk_n = res_stream_V_data_31_V_full_n;
    end else begin
        res_stream_V_data_31_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_31_V_write = 1'b1;
    end else begin
        res_stream_V_data_31_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((io_acc_block_signal_op139 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call100 = ((real_start == 1'b0) | (io_acc_block_signal_op4 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1092_ap_start_reg;

assign io_acc_block_signal_op139 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_31_V_full_n & res_stream_V_data_30_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_29_V_full_n & res_stream_V_data_28_V_full_n & res_stream_V_data_27_V_full_n & res_stream_V_data_26_V_full_n & res_stream_V_data_25_V_full_n & res_stream_V_data_24_V_full_n & res_stream_V_data_23_V_full_n & res_stream_V_data_22_V_full_n & res_stream_V_data_21_V_full_n & res_stream_V_data_20_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_19_V_full_n & res_stream_V_data_18_V_full_n & res_stream_V_data_17_V_full_n & res_stream_V_data_16_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign io_acc_block_signal_op4 = (data_stream_V_data_9_V_empty_n & data_stream_V_data_8_V_empty_n & data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_31_V_empty_n & data_stream_V_data_30_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_29_V_empty_n & data_stream_V_data_28_V_empty_n & data_stream_V_data_27_V_empty_n & data_stream_V_data_26_V_empty_n & data_stream_V_data_25_V_empty_n & data_stream_V_data_24_V_empty_n & data_stream_V_data_23_V_empty_n & data_stream_V_data_22_V_empty_n & data_stream_V_data_21_V_empty_n & data_stream_V_data_20_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_19_V_empty_n & data_stream_V_data_18_V_empty_n & data_stream_V_data_17_V_empty_n & data_stream_V_data_16_V_empty_n & data_stream_V_data_15_V_empty_n & data_stream_V_data_14_V_empty_n & data_stream_V_data_13_V_empty_n & data_stream_V_data_12_V_empty_n & data_stream_V_data_11_V_empty_n & data_stream_V_data_10_V_empty_n & data_stream_V_data_0_V_empty_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V_reg_1580;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_1630;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_1635;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_1640;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_1645;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_1650;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_1655;

assign res_stream_V_data_16_V_din = tmp_data_16_V_reg_1660;

assign res_stream_V_data_17_V_din = tmp_data_17_V_reg_1665;

assign res_stream_V_data_18_V_din = tmp_data_18_V_reg_1670;

assign res_stream_V_data_19_V_din = tmp_data_19_V_reg_1675;

assign res_stream_V_data_1_V_din = tmp_data_1_V_reg_1585;

assign res_stream_V_data_20_V_din = tmp_data_20_V_reg_1680;

assign res_stream_V_data_21_V_din = tmp_data_21_V_reg_1685;

assign res_stream_V_data_22_V_din = tmp_data_22_V_reg_1690;

assign res_stream_V_data_23_V_din = tmp_data_23_V_reg_1695;

assign res_stream_V_data_24_V_din = tmp_data_24_V_reg_1700;

assign res_stream_V_data_25_V_din = tmp_data_25_V_reg_1705;

assign res_stream_V_data_26_V_din = tmp_data_26_V_reg_1710;

assign res_stream_V_data_27_V_din = tmp_data_27_V_reg_1715;

assign res_stream_V_data_28_V_din = tmp_data_28_V_reg_1720;

assign res_stream_V_data_29_V_din = tmp_data_29_V_reg_1725;

assign res_stream_V_data_2_V_din = tmp_data_2_V_reg_1590;

assign res_stream_V_data_30_V_din = tmp_data_30_V_reg_1730;

assign res_stream_V_data_31_V_din = tmp_data_31_V_reg_1735;

assign res_stream_V_data_3_V_din = tmp_data_3_V_reg_1595;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_1600;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_1605;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_1610;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_1615;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_1620;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_1625;

assign start_out = real_start;

endmodule //dense_array_array_ap_fixed_16_6_5_3_0_32u_config8_s
