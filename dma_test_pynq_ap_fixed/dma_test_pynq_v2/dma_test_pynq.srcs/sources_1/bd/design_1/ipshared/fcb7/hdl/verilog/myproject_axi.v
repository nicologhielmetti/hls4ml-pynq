// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.982000,HLS_SYN_LAT=287,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=21,HLS_SYN_FF=11873,HLS_SYN_LUT=37975,HLS_VERSION=2019_2}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TLAST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_state6 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_pp1_stage0 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input   in_r_TLAST;
output  [15:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output   out_r_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg in_r_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] vector_rows;
reg   [31:0] vector_rows_0_data_reg;
reg    vector_rows_0_vld_reg;
reg    vector_rows_0_ack_out;
reg   [31:0] row_count;
reg    in_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln24_fu_235_p2;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln33_reg_554;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln33_reg_554_pp1_iter1_reg;
reg   [4:0] i_0_reg_156;
reg   [2:0] i2_0_reg_167;
reg   [31:0] vector_rows_read_reg_495;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln22_fu_221_p3;
reg   [31:0] select_ln22_reg_500;
reg   [0:0] icmp_ln24_reg_505;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln24_reg_505_pp0_iter1_reg;
wire   [4:0] i_fu_241_p2;
reg   [15:0] empty_28_reg_514_0;
wire   [7:0] shl_ln_fu_251_p3;
reg   [7:0] shl_ln_reg_519;
wire   [7:0] empty_29_fu_259_p2;
reg   [7:0] empty_29_reg_524;
wire   [0:0] icmp_ln203_fu_265_p2;
reg   [0:0] icmp_ln203_reg_529;
reg   [0:0] icmp_ln203_reg_529_pp0_iter1_reg;
wire   [255:0] shl_ln203_fu_329_p2;
reg   [255:0] shl_ln203_reg_537;
wire   [255:0] and_ln203_fu_347_p2;
reg   [255:0] and_ln203_reg_543;
wire   [0:0] icmp_ln37_1_fu_398_p2;
reg   [0:0] icmp_ln37_1_reg_549;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln33_fu_402_p2;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
reg    ap_block_state9_io;
wire    ap_block_state10_pp1_stage0_iter2;
reg    ap_block_state10_io;
reg    ap_block_pp1_stage0_11001;
wire   [2:0] i_1_fu_408_p2;
reg   [2:0] i_1_reg_558;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] tmp_2_fu_429_p7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state7;
wire    grp_myproject_fu_179_ap_ready;
wire    grp_myproject_fu_179_ap_done;
wire    ap_sync_grp_myproject_fu_179_ap_ready;
wire    ap_sync_grp_myproject_fu_179_ap_done;
reg    ap_block_state7_on_subcall_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
wire   [15:0] grp_myproject_fu_179_layer13_out_0_V;
wire   [15:0] grp_myproject_fu_179_layer13_out_1_V;
wire   [15:0] grp_myproject_fu_179_layer13_out_2_V;
wire   [15:0] grp_myproject_fu_179_layer13_out_3_V;
wire   [15:0] grp_myproject_fu_179_layer13_out_4_V;
wire    grp_myproject_fu_179_ap_start;
wire    grp_myproject_fu_179_layer13_out_0_V_ap_vld;
wire    grp_myproject_fu_179_layer13_out_1_V_ap_vld;
wire    grp_myproject_fu_179_layer13_out_2_V_ap_vld;
wire    grp_myproject_fu_179_layer13_out_3_V_ap_vld;
wire    grp_myproject_fu_179_layer13_out_4_V_ap_vld;
wire    grp_myproject_fu_179_ap_idle;
reg    grp_myproject_fu_179_ap_continue;
reg   [2:0] ap_phi_mux_i2_0_phi_fu_171_p4;
reg    grp_myproject_fu_179_ap_start_reg;
reg    ap_sync_reg_grp_myproject_fu_179_ap_ready;
reg    ap_sync_reg_grp_myproject_fu_179_ap_done;
reg   [255:0] in_local_V_fu_108;
reg   [15:0] out_local_0_fu_112;
reg   [15:0] out_local_1_fu_116;
reg   [15:0] out_local_2_fu_120;
reg   [15:0] out_local_3_fu_124;
reg   [15:0] out_local_4_fu_128;
wire   [255:0] in_local_V_1_fu_387_p2;
wire    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln20_fu_209_p2;
wire   [31:0] add_ln22_fu_215_p2;
wire   [3:0] trunc_ln203_fu_247_p1;
wire   [8:0] zext_ln203_fu_274_p1;
wire   [8:0] zext_ln203_1_fu_277_p1;
wire   [8:0] xor_ln203_fu_284_p2;
wire   [8:0] select_ln203_fu_290_p3;
wire   [8:0] select_ln203_2_fu_304_p3;
wire   [8:0] select_ln203_1_fu_297_p3;
wire   [8:0] xor_ln203_1_fu_311_p2;
wire   [255:0] zext_ln203_2_fu_280_p1;
wire   [255:0] zext_ln203_3_fu_317_p1;
wire   [255:0] zext_ln203_4_fu_321_p1;
wire   [255:0] zext_ln203_5_fu_325_p1;
wire   [255:0] shl_ln203_1_fu_335_p2;
wire   [255:0] lshr_ln203_fu_341_p2;
reg   [255:0] tmp_513_fu_356_p4;
wire   [255:0] xor_ln203_2_fu_371_p2;
wire   [255:0] select_ln203_3_fu_365_p3;
wire   [255:0] and_ln203_1_fu_376_p2;
wire   [255:0] and_ln203_2_fu_382_p2;
wire   [0:0] icmp_ln37_fu_446_p2;
wire    ap_CS_fsm_state11;
wire    regslice_both_out_data_V_U_apdone_blk;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_in_data_V_U_apdone_blk;
wire   [15:0] in_r_TDATA_int;
wire    in_r_TVALID_int;
reg    in_r_TREADY_int;
wire    regslice_both_in_data_V_U_ack_in;
wire    regslice_both_w1_in_last_U_apdone_blk;
wire    in_r_TLAST_int;
wire    regslice_both_w1_in_last_U_vld_out;
wire    regslice_both_w1_in_last_U_ack_in;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_V_U_vld_out;
wire    regslice_both_w1_out_last_U_apdone_blk;
wire    out_r_TLAST_int;
wire    regslice_both_w1_out_last_U_ack_in_dummy;
wire    regslice_both_w1_out_last_U_vld_out;

// power-on initialization
initial begin
#0 vector_rows_0_data_reg = 32'd0;
#0 vector_rows_0_vld_reg = 1'b0;
#0 row_count = 32'd0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_myproject_fu_179_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_179_ap_ready = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_179_ap_done = 1'b0;
end

myproject_axi_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
myproject_axi_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .vector_rows(vector_rows)
);

myproject grp_myproject_fu_179(
    .fc1_input_V(in_local_V_fu_108),
    .layer13_out_0_V(grp_myproject_fu_179_layer13_out_0_V),
    .layer13_out_1_V(grp_myproject_fu_179_layer13_out_1_V),
    .layer13_out_2_V(grp_myproject_fu_179_layer13_out_2_V),
    .layer13_out_3_V(grp_myproject_fu_179_layer13_out_3_V),
    .layer13_out_4_V(grp_myproject_fu_179_layer13_out_4_V),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .fc1_input_V_ap_vld(1'b1),
    .ap_start(grp_myproject_fu_179_ap_start),
    .layer13_out_0_V_ap_vld(grp_myproject_fu_179_layer13_out_0_V_ap_vld),
    .layer13_out_1_V_ap_vld(grp_myproject_fu_179_layer13_out_1_V_ap_vld),
    .layer13_out_2_V_ap_vld(grp_myproject_fu_179_layer13_out_2_V_ap_vld),
    .layer13_out_3_V_ap_vld(grp_myproject_fu_179_layer13_out_3_V_ap_vld),
    .layer13_out_4_V_ap_vld(grp_myproject_fu_179_layer13_out_4_V_ap_vld),
    .ap_done(grp_myproject_fu_179_ap_done),
    .ap_ready(grp_myproject_fu_179_ap_ready),
    .ap_idle(grp_myproject_fu_179_ap_idle),
    .ap_continue(grp_myproject_fu_179_ap_continue)
);

myproject_axi_muxqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
myproject_axi_muxqcK_U856(
    .din0(out_local_0_fu_112),
    .din1(out_local_1_fu_116),
    .din2(out_local_2_fu_120),
    .din3(out_local_3_fu_124),
    .din4(out_local_4_fu_128),
    .din5(i2_0_reg_167),
    .dout(tmp_2_fu_429_p7)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_in_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_data_V_U_ack_in),
    .data_out(in_r_TDATA_int),
    .vld_out(in_r_TVALID_int),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_in_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_in_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TLAST),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_w1_in_last_U_ack_in),
    .data_out(in_r_TLAST_int),
    .vld_out(regslice_both_w1_in_last_U_vld_out),
    .ack_out(in_r_TREADY_int),
    .apdone_blk(regslice_both_w1_in_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_2_fu_429_p7),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_V_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_out_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TLAST_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_w1_out_last_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_w1_out_last_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_w1_out_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_179_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_myproject_fu_179_ap_done <= 1'b0;
        end else if ((grp_myproject_fu_179_ap_done == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_179_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_179_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_myproject_fu_179_ap_ready <= 1'b0;
        end else if ((grp_myproject_fu_179_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_179_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_179_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((ap_sync_grp_myproject_fu_179_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
            grp_myproject_fu_179_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_179_ap_ready == 1'b1)) begin
            grp_myproject_fu_179_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i2_0_reg_167 <= i_1_reg_558;
    end else if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        i2_0_reg_167 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_235_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_156 <= i_fu_241_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg_156 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_505 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln203_reg_543 <= and_ln203_fu_347_p2;
        shl_ln203_reg_537 <= shl_ln203_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_28_reg_514_0 <= in_r_TDATA_int;
        empty_29_reg_524[7 : 4] <= empty_29_fu_259_p2[7 : 4];
        icmp_ln203_reg_529 <= icmp_ln203_fu_265_p2;
        shl_ln_reg_519[7 : 4] <= shl_ln_fu_251_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_558 <= i_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln203_reg_529_pp0_iter1_reg <= icmp_ln203_reg_529;
        icmp_ln24_reg_505 <= icmp_ln24_fu_235_p2;
        icmp_ln24_reg_505_pp0_iter1_reg <= icmp_ln24_reg_505;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln33_reg_554 <= icmp_ln33_fu_402_p2;
        icmp_ln33_reg_554_pp1_iter1_reg <= icmp_ln33_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln37_1_reg_549 <= icmp_ln37_1_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_505_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_local_V_fu_108 <= in_local_V_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_179_layer13_out_0_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        out_local_0_fu_112 <= grp_myproject_fu_179_layer13_out_0_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_179_layer13_out_1_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        out_local_1_fu_116 <= grp_myproject_fu_179_layer13_out_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_179_layer13_out_2_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        out_local_2_fu_120 <= grp_myproject_fu_179_layer13_out_2_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_179_layer13_out_3_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        out_local_3_fu_124 <= grp_myproject_fu_179_layer13_out_3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_myproject_fu_179_layer13_out_4_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        out_local_4_fu_128 <= grp_myproject_fu_179_layer13_out_4_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_count <= select_ln22_fu_221_p3;
        select_ln22_reg_500 <= select_ln22_fu_221_p3;
        vector_rows_read_reg_495 <= vector_rows_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((vector_rows_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((vector_rows_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (vector_rows_0_vld_reg == 1'b1)))) begin
        vector_rows_0_data_reg <= vector_rows;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_402_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln33_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i2_0_phi_fu_171_p4 = i_1_reg_558;
    end else begin
        ap_phi_mux_i2_0_phi_fu_171_p4 = i2_0_reg_167;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_myproject_fu_179_ap_continue = 1'b1;
    end else begin
        grp_myproject_fu_179_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_r_TVALID_int;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_in_data_V_U_ack_in == 1'b1) & (in_r_TVALID == 1'b1))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_235_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_r_TREADY_int = 1'b1;
    end else begin
        in_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (icmp_ln33_reg_554_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln33_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_554 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((regslice_both_out_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11)))) begin
        vector_rows_0_ack_out = 1'b1;
    end else begin
        vector_rows_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln24_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln24_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln33_fu_402_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln33_fu_402_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((regslice_both_out_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_215_p2 = (row_count + 32'd1);

assign and_ln203_1_fu_376_p2 = (xor_ln203_2_fu_371_p2 & in_local_V_fu_108);

assign and_ln203_2_fu_382_p2 = (select_ln203_3_fu_365_p3 & and_ln203_reg_543);

assign and_ln203_fu_347_p2 = (shl_ln203_1_fu_335_p2 & lshr_ln203_fu_341_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln24_fu_235_p2 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln24_fu_235_p2 == 1'd0) & (in_r_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln33_reg_554_pp1_iter1_reg == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln24_fu_235_p2 == 1'd0) & (in_r_TVALID_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_on_subcall_done = ((ap_sync_grp_myproject_fu_179_ap_ready & ap_sync_grp_myproject_fu_179_ap_done) == 1'b0);
end

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln33_reg_554 == 1'd0) & (out_r_TREADY_int == 1'b0));
end

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_myproject_fu_179_ap_done = (grp_myproject_fu_179_ap_done | ap_sync_reg_grp_myproject_fu_179_ap_done);

assign ap_sync_grp_myproject_fu_179_ap_ready = (grp_myproject_fu_179_ap_ready | ap_sync_reg_grp_myproject_fu_179_ap_ready);

assign empty_29_fu_259_p2 = (shl_ln_fu_251_p3 | 8'd15);

assign grp_myproject_fu_179_ap_start = grp_myproject_fu_179_ap_start_reg;

assign i_1_fu_408_p2 = (ap_phi_mux_i2_0_phi_fu_171_p4 + 3'd1);

assign i_fu_241_p2 = (i_0_reg_156 + 5'd1);

assign icmp_ln203_fu_265_p2 = ((shl_ln_fu_251_p3 > empty_29_fu_259_p2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_209_p2 = ((row_count == vector_rows_0_data_reg) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_235_p2 = ((i_0_reg_156 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_402_p2 = ((ap_phi_mux_i2_0_phi_fu_171_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_398_p2 = ((select_ln22_reg_500 == vector_rows_read_reg_495) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_446_p2 = ((i2_0_reg_167 == 3'd4) ? 1'b1 : 1'b0);

assign in_local_V_1_fu_387_p2 = (and_ln203_2_fu_382_p2 | and_ln203_1_fu_376_p2);

assign lshr_ln203_fu_341_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln203_5_fu_325_p1;

assign out_r_TLAST_int = (icmp_ln37_fu_446_p2 & icmp_ln37_1_reg_549);

assign out_r_TVALID = regslice_both_out_data_V_U_vld_out;

assign select_ln203_1_fu_297_p3 = ((icmp_ln203_reg_529[0:0] === 1'b1) ? zext_ln203_1_fu_277_p1 : zext_ln203_fu_274_p1);

assign select_ln203_2_fu_304_p3 = ((icmp_ln203_reg_529[0:0] === 1'b1) ? xor_ln203_fu_284_p2 : zext_ln203_fu_274_p1);

assign select_ln203_3_fu_365_p3 = ((icmp_ln203_reg_529_pp0_iter1_reg[0:0] === 1'b1) ? tmp_513_fu_356_p4 : shl_ln203_reg_537);

assign select_ln203_fu_290_p3 = ((icmp_ln203_reg_529[0:0] === 1'b1) ? zext_ln203_fu_274_p1 : zext_ln203_1_fu_277_p1);

assign select_ln22_fu_221_p3 = ((icmp_ln20_fu_209_p2[0:0] === 1'b1) ? 32'd1 : add_ln22_fu_215_p2);

assign shl_ln203_1_fu_335_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 << zext_ln203_4_fu_321_p1;

assign shl_ln203_fu_329_p2 = zext_ln203_2_fu_280_p1 << zext_ln203_3_fu_317_p1;

assign shl_ln_fu_251_p3 = {{trunc_ln203_fu_247_p1}, {4'd0}};

integer ap_tvar_int_0;

always @ (shl_ln203_reg_537) begin
    for (ap_tvar_int_0 = 256 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 255 - 0) begin
            tmp_513_fu_356_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_513_fu_356_p4[ap_tvar_int_0] = shl_ln203_reg_537[255 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln203_fu_247_p1 = i_0_reg_156[3:0];

assign xor_ln203_1_fu_311_p2 = (select_ln203_fu_290_p3 ^ 9'd255);

assign xor_ln203_2_fu_371_p2 = (256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 ^ and_ln203_reg_543);

assign xor_ln203_fu_284_p2 = (zext_ln203_fu_274_p1 ^ 9'd255);

assign zext_ln203_1_fu_277_p1 = empty_29_reg_524;

assign zext_ln203_2_fu_280_p1 = empty_28_reg_514_0;

assign zext_ln203_3_fu_317_p1 = select_ln203_2_fu_304_p3;

assign zext_ln203_4_fu_321_p1 = select_ln203_1_fu_297_p3;

assign zext_ln203_5_fu_325_p1 = xor_ln203_1_fu_311_p2;

assign zext_ln203_fu_274_p1 = shl_ln_reg_519;

always @ (posedge ap_clk) begin
    shl_ln_reg_519[3:0] <= 4'b0000;
    empty_29_reg_524[3:0] <= 4'b1111;
end

endmodule //myproject_axi
