-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.982000,HLS_SYN_LAT=287,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=21,HLS_SYN_FF=11873,HLS_SYN_LUT=37975,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal vector_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_rows_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal vector_rows_0_vld_reg : STD_LOGIC := '0';
    signal vector_rows_0_ack_out : STD_LOGIC;
    signal row_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln24_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln33_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln33_reg_554_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_156 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_0_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal vector_rows_read_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln22_fu_221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_505_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_241_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_28_reg_514_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_251_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln203_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln203_fu_329_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln203_reg_537 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_fu_347_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_reg_543 : STD_LOGIC_VECTOR (255 downto 0);
    signal icmp_ln37_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_1_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln33_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_fu_408_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_558 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_2_fu_429_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_myproject_fu_179_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_179_ap_done : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_179_ap_ready : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_179_ap_done : STD_LOGIC;
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_0_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_179_layer13_out_1_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_179_layer13_out_2_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_179_layer13_out_3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_179_layer13_out_4_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_179_ap_start : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_0_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_1_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_2_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_3_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_179_layer13_out_4_V_ap_vld : STD_LOGIC;
    signal grp_myproject_fu_179_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_179_ap_continue : STD_LOGIC;
    signal ap_phi_mux_i2_0_phi_fu_171_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_myproject_fu_179_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_myproject_fu_179_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_myproject_fu_179_ap_done : STD_LOGIC := '0';
    signal in_local_V_fu_108 : STD_LOGIC_VECTOR (255 downto 0);
    signal out_local_0_fu_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_1_fu_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_2_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_3_fu_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_4_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_local_V_1_fu_387_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal icmp_ln20_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_fu_247_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_1_fu_277_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln203_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_fu_290_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_2_fu_304_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_1_fu_297_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln203_1_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_2_fu_280_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_3_fu_317_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_4_fu_321_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_5_fu_325_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln203_1_fu_335_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal lshr_ln203_fu_341_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_513_fu_356_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal xor_ln203_2_fu_371_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal select_ln203_3_fu_365_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_1_fu_376_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_2_fu_382_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal icmp_ln37_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal regslice_both_out_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_in_last_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_in_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_in_last_U_ack_in : STD_LOGIC;
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_out_last_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_out_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_out_last_U_vld_out : STD_LOGIC;

    component myproject IS
    port (
        fc1_input_V : IN STD_LOGIC_VECTOR (255 downto 0);
        layer13_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer13_out_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        fc1_input_V_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        layer13_out_0_V_ap_vld : OUT STD_LOGIC;
        layer13_out_1_V_ap_vld : OUT STD_LOGIC;
        layer13_out_2_V_ap_vld : OUT STD_LOGIC;
        layer13_out_3_V_ap_vld : OUT STD_LOGIC;
        layer13_out_4_V_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component myproject_axi_muxqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        vector_rows : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_axi_AXILiteS_s_axi_U : component myproject_axi_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        vector_rows => vector_rows);

    grp_myproject_fu_179 : component myproject
    port map (
        fc1_input_V => in_local_V_fu_108,
        layer13_out_0_V => grp_myproject_fu_179_layer13_out_0_V,
        layer13_out_1_V => grp_myproject_fu_179_layer13_out_1_V,
        layer13_out_2_V => grp_myproject_fu_179_layer13_out_2_V,
        layer13_out_3_V => grp_myproject_fu_179_layer13_out_3_V,
        layer13_out_4_V => grp_myproject_fu_179_layer13_out_4_V,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        fc1_input_V_ap_vld => ap_const_logic_1,
        ap_start => grp_myproject_fu_179_ap_start,
        layer13_out_0_V_ap_vld => grp_myproject_fu_179_layer13_out_0_V_ap_vld,
        layer13_out_1_V_ap_vld => grp_myproject_fu_179_layer13_out_1_V_ap_vld,
        layer13_out_2_V_ap_vld => grp_myproject_fu_179_layer13_out_2_V_ap_vld,
        layer13_out_3_V_ap_vld => grp_myproject_fu_179_layer13_out_3_V_ap_vld,
        layer13_out_4_V_ap_vld => grp_myproject_fu_179_layer13_out_4_V_ap_vld,
        ap_done => grp_myproject_fu_179_ap_done,
        ap_ready => grp_myproject_fu_179_ap_ready,
        ap_idle => grp_myproject_fu_179_ap_idle,
        ap_continue => grp_myproject_fu_179_ap_continue);

    myproject_axi_muxqcK_U856 : component myproject_axi_muxqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => out_local_0_fu_112,
        din1 => out_local_1_fu_116,
        din2 => out_local_2_fu_120,
        din3 => out_local_3_fu_124,
        din4 => out_local_4_fu_128,
        din5 => i2_0_reg_167,
        dout => tmp_2_fu_429_p7);

    regslice_both_in_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_V_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_V_U_apdone_blk);

    regslice_both_w1_in_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_w1_in_last_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_w1_in_last_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_w1_in_last_U_apdone_blk);

    regslice_both_out_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_2_fu_429_p7,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_V_U_apdone_blk);

    regslice_both_w1_out_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TLAST_int,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_w1_out_last_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_w1_out_last_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_w1_out_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_179_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_179_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_sync_reg_grp_myproject_fu_179_ap_done <= ap_const_logic_0;
                elsif ((grp_myproject_fu_179_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_179_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_179_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_179_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_sync_reg_grp_myproject_fu_179_ap_ready <= ap_const_logic_0;
                elsif ((grp_myproject_fu_179_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_179_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_179_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_sync_grp_myproject_fu_179_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_myproject_fu_179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_179_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i2_0_reg_167 <= i_1_reg_558;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i2_0_reg_167 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_156 <= i_fu_241_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_156 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    vector_rows_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_505 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln203_reg_543 <= and_ln203_fu_347_p2;
                shl_ln203_reg_537 <= shl_ln203_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_28_reg_514_0 <= in_r_TDATA_int;
                    empty_29_reg_524(7 downto 4) <= empty_29_fu_259_p2(7 downto 4);
                icmp_ln203_reg_529 <= icmp_ln203_fu_265_p2;
                    shl_ln_reg_519(7 downto 4) <= shl_ln_fu_251_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_558 <= i_1_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln203_reg_529_pp0_iter1_reg <= icmp_ln203_reg_529;
                icmp_ln24_reg_505 <= icmp_ln24_fu_235_p2;
                icmp_ln24_reg_505_pp0_iter1_reg <= icmp_ln24_reg_505;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln33_reg_554 <= icmp_ln33_fu_402_p2;
                icmp_ln33_reg_554_pp1_iter1_reg <= icmp_ln33_reg_554;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln37_1_reg_549 <= icmp_ln37_1_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_505_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_local_V_fu_108 <= in_local_V_1_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_179_layer13_out_0_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_local_0_fu_112 <= grp_myproject_fu_179_layer13_out_0_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_179_layer13_out_1_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_local_1_fu_116 <= grp_myproject_fu_179_layer13_out_1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_179_layer13_out_2_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_local_2_fu_120 <= grp_myproject_fu_179_layer13_out_2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_179_layer13_out_3_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_local_3_fu_124 <= grp_myproject_fu_179_layer13_out_3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_myproject_fu_179_layer13_out_4_V_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                out_local_4_fu_128 <= grp_myproject_fu_179_layer13_out_4_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_count <= select_ln22_fu_221_p3;
                select_ln22_reg_500 <= select_ln22_fu_221_p3;
                vector_rows_read_reg_495 <= vector_rows_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((vector_rows_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((vector_rows_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (vector_rows_0_vld_reg = ap_const_logic_1)))) then
                vector_rows_0_data_reg <= vector_rows;
            end if;
        end if;
    end process;
    shl_ln_reg_519(3 downto 0) <= "0000";
    empty_29_reg_524(3 downto 0) <= "1111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln24_fu_235_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, icmp_ln33_fu_402_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_block_pp1_stage0_subdone, ap_CS_fsm_state11, regslice_both_out_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln24_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln24_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln33_fu_402_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln33_fu_402_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((regslice_both_out_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln22_fu_215_p2 <= std_logic_vector(unsigned(row_count) + unsigned(ap_const_lv32_1));
    and_ln203_1_fu_376_p2 <= (xor_ln203_2_fu_371_p2 and in_local_V_fu_108);
    and_ln203_2_fu_382_p2 <= (select_ln203_3_fu_365_p3 and and_ln203_reg_543);
    and_ln203_fu_347_p2 <= (shl_ln203_1_fu_335_p2 and lshr_ln203_fu_341_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln24_fu_235_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln24_fu_235_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_io_assign_proc : process(icmp_ln33_reg_554_pp1_iter1_reg, out_r_TREADY_int)
    begin
                ap_block_state10_io <= ((icmp_ln33_reg_554_pp1_iter1_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter0_assign_proc : process(icmp_ln24_fu_235_p2, in_r_TVALID_int)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_on_subcall_done_assign_proc : process(ap_sync_grp_myproject_fu_179_ap_ready, ap_sync_grp_myproject_fu_179_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((ap_sync_grp_myproject_fu_179_ap_ready and ap_sync_grp_myproject_fu_179_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(icmp_ln33_reg_554, out_r_TREADY_int)
    begin
                ap_block_state9_io <= ((icmp_ln33_reg_554 = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln24_fu_235_p2)
    begin
        if ((icmp_ln24_fu_235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln33_fu_402_p2)
    begin
        if ((icmp_ln33_fu_402_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_171_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln33_reg_554, i2_0_reg_167, i_1_reg_558)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln33_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i2_0_phi_fu_171_p4 <= i_1_reg_558;
        else 
            ap_phi_mux_i2_0_phi_fu_171_p4 <= i2_0_reg_167;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_myproject_fu_179_ap_done <= (grp_myproject_fu_179_ap_done or ap_sync_reg_grp_myproject_fu_179_ap_done);
    ap_sync_grp_myproject_fu_179_ap_ready <= (grp_myproject_fu_179_ap_ready or ap_sync_reg_grp_myproject_fu_179_ap_ready);
    empty_29_fu_259_p2 <= (shl_ln_fu_251_p3 or ap_const_lv8_F);

    grp_myproject_fu_179_ap_continue_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_myproject_fu_179_ap_continue <= ap_const_logic_1;
        else 
            grp_myproject_fu_179_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_myproject_fu_179_ap_start <= grp_myproject_fu_179_ap_start_reg;
    i_1_fu_408_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_171_p4) + unsigned(ap_const_lv3_1));
    i_fu_241_p2 <= std_logic_vector(unsigned(i_0_reg_156) + unsigned(ap_const_lv5_1));
    icmp_ln203_fu_265_p2 <= "1" when (unsigned(shl_ln_fu_251_p3) > unsigned(empty_29_fu_259_p2)) else "0";
    icmp_ln20_fu_209_p2 <= "1" when (row_count = vector_rows_0_data_reg) else "0";
    icmp_ln24_fu_235_p2 <= "1" when (i_0_reg_156 = ap_const_lv5_10) else "0";
    icmp_ln33_fu_402_p2 <= "1" when (ap_phi_mux_i2_0_phi_fu_171_p4 = ap_const_lv3_5) else "0";
    icmp_ln37_1_fu_398_p2 <= "1" when (select_ln22_reg_500 = vector_rows_read_reg_495) else "0";
    icmp_ln37_fu_446_p2 <= "1" when (i2_0_reg_167 = ap_const_lv3_4) else "0";
    in_local_V_1_fu_387_p2 <= (and_ln203_2_fu_382_p2 or and_ln203_1_fu_376_p2);

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln24_fu_235_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_data_V_U_ack_in)
    begin
        if (((regslice_both_in_data_V_U_ack_in = ap_const_logic_1) and (in_r_TVALID = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln24_fu_235_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln24_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln203_fu_341_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln203_5_fu_325_p1(31-1 downto 0)))));

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln33_reg_554, ap_enable_reg_pp1_iter2, icmp_ln33_reg_554_pp1_iter1_reg, out_r_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln33_reg_554_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln33_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST_int <= (icmp_ln37_fu_446_p2(0) and icmp_ln37_1_reg_549(0));
    out_r_TVALID <= regslice_both_out_data_V_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln33_reg_554, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln33_reg_554 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln203_1_fu_297_p3 <= 
        zext_ln203_1_fu_277_p1 when (icmp_ln203_reg_529(0) = '1') else 
        zext_ln203_fu_274_p1;
    select_ln203_2_fu_304_p3 <= 
        xor_ln203_fu_284_p2 when (icmp_ln203_reg_529(0) = '1') else 
        zext_ln203_fu_274_p1;
    select_ln203_3_fu_365_p3 <= 
        tmp_513_fu_356_p4 when (icmp_ln203_reg_529_pp0_iter1_reg(0) = '1') else 
        shl_ln203_reg_537;
    select_ln203_fu_290_p3 <= 
        zext_ln203_fu_274_p1 when (icmp_ln203_reg_529(0) = '1') else 
        zext_ln203_1_fu_277_p1;
    select_ln22_fu_221_p3 <= 
        ap_const_lv32_1 when (icmp_ln20_fu_209_p2(0) = '1') else 
        add_ln22_fu_215_p2;
    shl_ln203_1_fu_335_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln203_4_fu_321_p1(31-1 downto 0)))));
    shl_ln203_fu_329_p2 <= std_logic_vector(shift_left(unsigned(zext_ln203_2_fu_280_p1),to_integer(unsigned('0' & zext_ln203_3_fu_317_p1(31-1 downto 0)))));
    shl_ln_fu_251_p3 <= (trunc_ln203_fu_247_p1 & ap_const_lv4_0);
    
    tmp_513_fu_356_p4_proc : process(shl_ln203_reg_537)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_513_fu_356_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_FF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := shl_ln203_reg_537;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_FF(8-1 downto 0)));
            for tmp_513_fu_356_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_513_fu_356_p4_i) := shl_ln203_reg_537(256-1-tmp_513_fu_356_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_513_fu_356_p4 <= resvalue(256-1 downto 0);
    end process;

    trunc_ln203_fu_247_p1 <= i_0_reg_156(4 - 1 downto 0);

    vector_rows_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, regslice_both_out_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((regslice_both_out_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            vector_rows_0_ack_out <= ap_const_logic_1;
        else 
            vector_rows_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln203_1_fu_311_p2 <= (select_ln203_fu_290_p3 xor ap_const_lv9_FF);
    xor_ln203_2_fu_371_p2 <= (ap_const_lv256_lc_1 xor and_ln203_reg_543);
    xor_ln203_fu_284_p2 <= (zext_ln203_fu_274_p1 xor ap_const_lv9_FF);
    zext_ln203_1_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_29_reg_524),9));
    zext_ln203_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28_reg_514_0),256));
    zext_ln203_3_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_2_fu_304_p3),256));
    zext_ln203_4_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_1_fu_297_p3),256));
    zext_ln203_5_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln203_1_fu_311_p2),256));
    zext_ln203_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_519),9));
end behav;
