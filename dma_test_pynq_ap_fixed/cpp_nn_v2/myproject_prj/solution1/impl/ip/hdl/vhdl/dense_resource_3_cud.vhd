-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_3_cud_rom is 
    generic(
             DWIDTH     : integer := 112; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_3_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111100000000000000000000000111111000000000000000000000000000001101010000000000000001111010000000000000000000000", 
    1 => "0000000001000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    2 => "1010000000000011010000000000000000000000000000000000000000000000101000000000000000000000000000000000001100001100", 
    3 => "0000000000000000000001011100110011000100101101010010001000001001101000011111000000000000000000000000000000011100", 
    4 => "0000000110010000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000", 
    5 => "0000000000000000000000000000000000000000000000000001001000000000000000000000000000000000000000000000000000000000", 
    6 => "0000000000000011010000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000", 
    7 => "0000000001101000000001101000000000000011000000000111000000000000000000000000000000000000000000000000000000000000", 
    8 => "1110110000000000110000010000000000000000000000000000000011011100010010000000000000100000000000000000000001101110", 
    9 => "0000000000000000101100000000000000011000000000000110100000000000000000000000000000000000000000000000000000000000", 
    10 => "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000", 
    11 => "0000000110101000000000000000000000000000000000000000000011010100000000000000000000000011110000000000111000000000", 
    12 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011100000000", 
    13 => "0000000000000011100000000000111000000001000000000000000000000000000000000000000000000000010000000011010100000000", 
    14 => "0000000101011010001000011010000000000000001100000000000000000000000000011000001000000000000000000000000000000000", 
    15 => "0010110000000000000001100000000000001000000000000000000000000001100000001011000000000010110000000011111000000000", 
    16 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    17 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000010000000000000000", 
    18 => "1101000000000001000100000000000000000000000000000000000000000000000000110010011010100000000000000011011100000000", 
    19 => "0011000000000001110000000000101101011101100000000000000000000000000000000000010011000000000000000000000000000000", 
    20 => "0000000000001000000000000000000000000000000000000000000000000000000000111010011011000011110000000000000000101110", 
    21 => "0000000000000000110000000000000000011101000000000111110000000000000000110011000000000000000001011000000000000000", 
    22 => "0000000000000000000000000000000000000000000001110000000011110100000000000000000000001101000000000000000000000000", 
    23 => "0000000110011000000001101100000000000000000000000111010000000001101010000000000000000000000000000000100100000000", 
    24 => "0010000000000000000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    25 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001011011101101000", 
    26 => "0000000000000000000000000000000000000000000011010110111000000000000000000000000000000000000000000000000000000000", 
    27 => "0001110000000000000000000000001011000000000000000000000000000000000000000000000000000010100000000000000000000000", 
    28 => "0000000000000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    29 => "0000000000000000000000000000110110000000001101110001011000000000010110001000000000000000000000000000000000000000", 
    30 => "0000000000000001111100000000000000001111100000000101110001110100000000100111000000000000000000000000000000000000", 
    31 => "0000000110111000000000000000110101000000000010010000000000000000000000000000000000000000000110101011000100000000", 
    32 => "0000000111010000000000000000000000000000000000000110101000000000000000000000000000000000000000000000000000000000", 
    33 => "0000000111111000000000000000000000000000000000000111010000000000000000110010000000000000000000000000000000000000", 
    34 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000100000011100110100", 
    35 => "0000100111111000011100000000101011000000000101110000000000000001011110000000000000001111000011010000000000000000", 
    36 => "0000000000000000000000000000000000000000000000000000000000000000000000110110000000000000000000000000000000101000", 
    37 => "0001010000000000000000011010000000000000000000000000000000000000000000110100000000000000000000000000000000000000", 
    38 => "0000000000000000000000000000111001000000000000000001011000000000000000000000000000001111010000000000000000000000", 
    39 => "0000000000000000000000000000000000011011100000000000000000000000000000000000000000000000000000000000000000000000", 
    40 => "0000000000000000000000000000000000000000000000000000000000000000000000111010000000000000000000000011111000000000", 
    41 => "0000000001011000000000000000000000000000000000000000000000000000000000000000011011100000000000000000000000000000", 
    42 => "0000000000000011010100000000000000000000000000000000000000000000000000000000000000000000000000000011100001110010", 
    43 => "0000000000000000000000000000000000011000000000000000000000011100000000111100000000001110100000000011100001110000", 
    44 => "0000000001001011100001100110000000000000000000000000000011100000000000000000000000000000000000000000000000000000", 
    45 => "0000000000000000000001101110000000000101000000000000000000000001100100000000011011100000000000000000000000000000", 
    46 => "0111110000000000000000000000110001000100100000000000000001110000000000000000000000000101100011111010100000000000", 
    47 => "1111000001000000000000000000000000000000001101110000000011101100000000000000000000000000000000000000000000000000", 
    48 => "0000000110011000110100000000000000000000001110110000000000000000011000000000011001100000000000000000000000000000", 
    49 => "0000000000000000000000011010000000000101100001100000000000000000000000000000000000000000000000000000000000000000", 
    50 => "1011010000000000000000000000101100000000000000000000000000000000000000000000000000000010110000000000000000000000", 
    51 => "0000000000000000111000000000100111000000000000000110011000000001101000000000010100100111000001101000000000000000", 
    52 => "0000000000000000000000000000000000000000000000000000000000000001111110000000000000000000000000000000000000000000", 
    53 => "1101110111011000000000000000000000000000000000000000110000000000000000111111000000000000000000000000000001101110", 
    54 => "0000000110011000000000000000000000011001001110110000000000000000000000000000000000000000000000000011101000000000", 
    55 => "0000000000000000000000000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000", 
    56 => "0000000001001000000000000000111010000000000000000000110011110001110110111101000000000000000000000000000000000000", 
    57 => "0000000110011000000000000000000000000000001111010000000000000000000000000000000010100011000000000000000001110000", 
    58 => "0000000000000000000000000000000000000110101110100000000000000000011100000000000000000000000000000000000000010100", 
    59 => "0000000110001000000000000000111010000000000000000110110000000000000000000000000000001101100000000011011000000000", 
    60 => "0000000000000000011000000000000000000000000000000001001000000000000000110111011000101110000000000000000000000000", 
    61 => "0000000000000000000000000000000000000001101110010000000011001000000000000000000000000000000001010000000000011000", 
    62 => "0000000000000000000000000000101110000000000010010010100010010000000000011011000000000111010110010010000000010100", 
    63 => "0010000001100011010001101100000100011010100000000000000000110000000000000000000000000001100000000000000000100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_3_cud is
    generic (
        DataWidth : INTEGER := 112;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_3_cud is
    component dense_resource_3_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_3_cud_rom_U :  component dense_resource_3_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


