-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_1_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_2_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_3_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_4_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_5_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_6_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_7_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_8_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_9_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_10_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_11_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_12_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_13_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_14_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_15_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_16_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_17_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_18_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_19_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_20_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_21_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_22_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_23_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_24_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_25_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_26_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_27_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_28_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_29_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_30_V : IN STD_LOGIC_VECTOR (5 downto 0);
    data_31_V : IN STD_LOGIC_VECTOR (5 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dense_resource_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_FFC0 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111000000";
    constant ap_const_lv16_FF60 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100000";
    constant ap_const_lv16_FEA0 : STD_LOGIC_VECTOR (15 downto 0) := "1111111010100000";
    constant ap_const_lv16_A0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010100000";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln64_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w11_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w11_V_ce0 : STD_LOGIC;
    signal w11_V_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal w_index15_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_V_0_013_reg_417 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_1_011_reg_431 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_09_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_07_reg_459 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_4_05_reg_473 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_615_p34 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_896 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_896_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal w_index_fu_690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_index_reg_906 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln64_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_911_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_911_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln76_fu_702_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln76_reg_915 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_920 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_925 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_reg_930 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_reg_935 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln4_reg_940 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_s_reg_945 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_107_reg_950 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_108_reg_955 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln708_109_reg_960 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_0_V_fu_847_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal acc_1_V_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_867_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_877_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_887_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_w_index15_phi_fu_392_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln76_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_615_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p7 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p8 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p9 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p11 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p12 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p13 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p14 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p15 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p16 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p17 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p18 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p19 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p20 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p21 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p22 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p23 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p24 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p25 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p26 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p27 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p28 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p29 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p30 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p31 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_615_p32 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_fu_752_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1116_fu_746_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_fu_752_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_fu_752_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_20_fu_771_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_20_fu_771_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_20_fu_771_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_21_fu_790_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_21_fu_790_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_21_fu_790_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_22_fu_809_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_22_fu_809_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_22_fu_809_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_23_fu_828_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_23_fu_828_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_23_fu_828_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln708_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_1_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_2_fu_864_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_3_fu_874_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_4_fu_884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_176 : BOOLEAN;

    component myproject_axi_muxkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        din4 : IN STD_LOGIC_VECTOR (6 downto 0);
        din5 : IN STD_LOGIC_VECTOR (6 downto 0);
        din6 : IN STD_LOGIC_VECTOR (6 downto 0);
        din7 : IN STD_LOGIC_VECTOR (6 downto 0);
        din8 : IN STD_LOGIC_VECTOR (6 downto 0);
        din9 : IN STD_LOGIC_VECTOR (6 downto 0);
        din10 : IN STD_LOGIC_VECTOR (6 downto 0);
        din11 : IN STD_LOGIC_VECTOR (6 downto 0);
        din12 : IN STD_LOGIC_VECTOR (6 downto 0);
        din13 : IN STD_LOGIC_VECTOR (6 downto 0);
        din14 : IN STD_LOGIC_VECTOR (6 downto 0);
        din15 : IN STD_LOGIC_VECTOR (6 downto 0);
        din16 : IN STD_LOGIC_VECTOR (6 downto 0);
        din17 : IN STD_LOGIC_VECTOR (6 downto 0);
        din18 : IN STD_LOGIC_VECTOR (6 downto 0);
        din19 : IN STD_LOGIC_VECTOR (6 downto 0);
        din20 : IN STD_LOGIC_VECTOR (6 downto 0);
        din21 : IN STD_LOGIC_VECTOR (6 downto 0);
        din22 : IN STD_LOGIC_VECTOR (6 downto 0);
        din23 : IN STD_LOGIC_VECTOR (6 downto 0);
        din24 : IN STD_LOGIC_VECTOR (6 downto 0);
        din25 : IN STD_LOGIC_VECTOR (6 downto 0);
        din26 : IN STD_LOGIC_VECTOR (6 downto 0);
        din27 : IN STD_LOGIC_VECTOR (6 downto 0);
        din28 : IN STD_LOGIC_VECTOR (6 downto 0);
        din29 : IN STD_LOGIC_VECTOR (6 downto 0);
        din30 : IN STD_LOGIC_VECTOR (6 downto 0);
        din31 : IN STD_LOGIC_VECTOR (6 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component dense_resource_2_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    w11_V_U : component dense_resource_2_lbW
    generic map (
        DataWidth => 35,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w11_V_address0,
        ce0 => w11_V_ce0,
        q0 => w11_V_q0);

    myproject_axi_muxkbM_U530 : component myproject_axi_muxkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        din4_WIDTH => 7,
        din5_WIDTH => 7,
        din6_WIDTH => 7,
        din7_WIDTH => 7,
        din8_WIDTH => 7,
        din9_WIDTH => 7,
        din10_WIDTH => 7,
        din11_WIDTH => 7,
        din12_WIDTH => 7,
        din13_WIDTH => 7,
        din14_WIDTH => 7,
        din15_WIDTH => 7,
        din16_WIDTH => 7,
        din17_WIDTH => 7,
        din18_WIDTH => 7,
        din19_WIDTH => 7,
        din20_WIDTH => 7,
        din21_WIDTH => 7,
        din22_WIDTH => 7,
        din23_WIDTH => 7,
        din24_WIDTH => 7,
        din25_WIDTH => 7,
        din26_WIDTH => 7,
        din27_WIDTH => 7,
        din28_WIDTH => 7,
        din29_WIDTH => 7,
        din30_WIDTH => 7,
        din31_WIDTH => 7,
        din32_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => tmp_3_fu_615_p1,
        din1 => tmp_3_fu_615_p2,
        din2 => tmp_3_fu_615_p3,
        din3 => tmp_3_fu_615_p4,
        din4 => tmp_3_fu_615_p5,
        din5 => tmp_3_fu_615_p6,
        din6 => tmp_3_fu_615_p7,
        din7 => tmp_3_fu_615_p8,
        din8 => tmp_3_fu_615_p9,
        din9 => tmp_3_fu_615_p10,
        din10 => tmp_3_fu_615_p11,
        din11 => tmp_3_fu_615_p12,
        din12 => tmp_3_fu_615_p13,
        din13 => tmp_3_fu_615_p14,
        din14 => tmp_3_fu_615_p15,
        din15 => tmp_3_fu_615_p16,
        din16 => tmp_3_fu_615_p17,
        din17 => tmp_3_fu_615_p18,
        din18 => tmp_3_fu_615_p19,
        din19 => tmp_3_fu_615_p20,
        din20 => tmp_3_fu_615_p21,
        din21 => tmp_3_fu_615_p22,
        din22 => tmp_3_fu_615_p23,
        din23 => tmp_3_fu_615_p24,
        din24 => tmp_3_fu_615_p25,
        din25 => tmp_3_fu_615_p26,
        din26 => tmp_3_fu_615_p27,
        din27 => tmp_3_fu_615_p28,
        din28 => tmp_3_fu_615_p29,
        din29 => tmp_3_fu_615_p30,
        din30 => tmp_3_fu_615_p31,
        din31 => tmp_3_fu_615_p32,
        din32 => ap_phi_mux_w_index15_phi_fu_392_p6,
        dout => tmp_3_fu_615_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_0_013_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                acc_V_0_013_reg_417 <= acc_0_V_fu_847_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_V_0_013_reg_417 <= ap_const_lv16_FFC0;
            end if; 
        end if;
    end process;

    acc_V_1_011_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                acc_V_1_011_reg_431 <= acc_1_V_fu_857_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_V_1_011_reg_431 <= ap_const_lv16_FF60;
            end if; 
        end if;
    end process;

    acc_V_2_09_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                acc_V_2_09_reg_445 <= acc_2_V_fu_867_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_V_2_09_reg_445 <= ap_const_lv16_FEA0;
            end if; 
        end if;
    end process;

    acc_V_3_07_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                acc_V_3_07_reg_459 <= acc_3_V_fu_877_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_V_3_07_reg_459 <= ap_const_lv16_A0;
            end if; 
        end if;
    end process;

    acc_V_4_05_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                acc_V_4_05_reg_473 <= acc_4_V_fu_887_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_V_4_05_reg_473 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    w_index15_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln64_reg_911 = ap_const_lv1_0))) then 
                w_index15_reg_388 <= w_index_reg_906;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index15_reg_388 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_reg_911 <= icmp_ln64_fu_696_p2;
                icmp_ln64_reg_911_pp0_iter1_reg <= icmp_ln64_reg_911;
                tmp_3_reg_896 <= tmp_3_fu_615_p34;
                tmp_3_reg_896_pp0_iter1_reg <= tmp_3_reg_896;
                tmp_4_reg_920 <= w11_V_q0(13 downto 7);
                tmp_5_reg_925 <= w11_V_q0(20 downto 14);
                tmp_6_reg_930 <= w11_V_q0(27 downto 21);
                tmp_7_reg_935 <= w11_V_q0(34 downto 28);
                trunc_ln76_reg_915 <= trunc_ln76_fu_702_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln64_reg_911_pp0_iter2_reg <= icmp_ln64_reg_911_pp0_iter1_reg;
                trunc_ln4_reg_940 <= mul_ln1118_fu_752_p2(13 downto 2);
                trunc_ln708_107_reg_950 <= mul_ln1118_21_fu_790_p2(13 downto 2);
                trunc_ln708_108_reg_955 <= mul_ln1118_22_fu_809_p2(13 downto 2);
                trunc_ln708_109_reg_960 <= mul_ln1118_23_fu_828_p2(13 downto 2);
                trunc_ln708_s_reg_945 <= mul_ln1118_20_fu_771_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_906 <= w_index_fu_690_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    acc_0_V_fu_847_p2 <= std_logic_vector(signed(sext_ln708_fu_844_p1) + signed(acc_V_0_013_reg_417));
    acc_1_V_fu_857_p2 <= std_logic_vector(signed(sext_ln708_1_fu_854_p1) + signed(acc_V_1_011_reg_431));
    acc_2_V_fu_867_p2 <= std_logic_vector(signed(sext_ln708_2_fu_864_p1) + signed(acc_V_2_09_reg_445));
    acc_3_V_fu_877_p2 <= std_logic_vector(signed(sext_ln708_3_fu_874_p1) + signed(acc_V_3_07_reg_459));
    acc_4_V_fu_887_p2 <= std_logic_vector(signed(sext_ln708_4_fu_884_p1) + signed(acc_V_4_05_reg_473));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_176_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_176 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_w_index15_phi_fu_392_p6_assign_proc : process(w_index15_reg_388, w_index_reg_906, icmp_ln64_reg_911, ap_condition_176)
    begin
        if ((ap_const_boolean_1 = ap_condition_176)) then
            if ((icmp_ln64_reg_911 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index15_phi_fu_392_p6 <= ap_const_lv5_0;
            elsif ((icmp_ln64_reg_911 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index15_phi_fu_392_p6 <= w_index_reg_906;
            else 
                ap_phi_mux_w_index15_phi_fu_392_p6 <= w_index15_reg_388;
            end if;
        else 
            ap_phi_mux_w_index15_phi_fu_392_p6 <= w_index15_reg_388;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln64_fu_696_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_696_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln64_fu_696_p2 <= "1" when (ap_phi_mux_w_index15_phi_fu_392_p6 = ap_const_lv5_1F) else "0";
    mul_ln1118_20_fu_771_p0 <= sext_ln1116_fu_746_p1(7 - 1 downto 0);
    mul_ln1118_20_fu_771_p1 <= tmp_4_reg_920;
    mul_ln1118_20_fu_771_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_20_fu_771_p0) * signed(mul_ln1118_20_fu_771_p1))), 14));
    mul_ln1118_21_fu_790_p0 <= sext_ln1116_fu_746_p1(7 - 1 downto 0);
    mul_ln1118_21_fu_790_p1 <= tmp_5_reg_925;
    mul_ln1118_21_fu_790_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_21_fu_790_p0) * signed(mul_ln1118_21_fu_790_p1))), 14));
    mul_ln1118_22_fu_809_p0 <= sext_ln1116_fu_746_p1(7 - 1 downto 0);
    mul_ln1118_22_fu_809_p1 <= tmp_6_reg_930;
    mul_ln1118_22_fu_809_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_22_fu_809_p0) * signed(mul_ln1118_22_fu_809_p1))), 14));
    mul_ln1118_23_fu_828_p0 <= sext_ln1116_fu_746_p1(7 - 1 downto 0);
    mul_ln1118_23_fu_828_p1 <= tmp_7_reg_935;
    mul_ln1118_23_fu_828_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_23_fu_828_p0) * signed(mul_ln1118_23_fu_828_p1))), 14));
    mul_ln1118_fu_752_p0 <= sext_ln1116_fu_746_p1(7 - 1 downto 0);
    mul_ln1118_fu_752_p1 <= trunc_ln76_reg_915;
    mul_ln1118_fu_752_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_752_p0) * signed(mul_ln1118_fu_752_p1))), 14));
    res_0_V <= std_logic_vector(signed(sext_ln708_fu_844_p1) + signed(acc_V_0_013_reg_417));

    res_0_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= std_logic_vector(signed(sext_ln708_1_fu_854_p1) + signed(acc_V_1_011_reg_431));

    res_1_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= std_logic_vector(signed(sext_ln708_2_fu_864_p1) + signed(acc_V_2_09_reg_445));

    res_2_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= std_logic_vector(signed(sext_ln708_3_fu_874_p1) + signed(acc_V_3_07_reg_459));

    res_3_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= std_logic_vector(signed(sext_ln708_4_fu_884_p1) + signed(acc_V_4_05_reg_473));

    res_4_V_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln64_reg_911_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_911_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_896_pp0_iter1_reg),14));

        sext_ln708_1_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_reg_945),16));

        sext_ln708_2_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_107_reg_950),16));

        sext_ln708_3_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_108_reg_955),16));

        sext_ln708_4_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_109_reg_960),16));

        sext_ln708_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_940),16));

    tmp_3_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_0_V),7));
    tmp_3_fu_615_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_9_V),7));
    tmp_3_fu_615_p11 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_10_V),7));
    tmp_3_fu_615_p12 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_11_V),7));
    tmp_3_fu_615_p13 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_12_V),7));
    tmp_3_fu_615_p14 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_13_V),7));
    tmp_3_fu_615_p15 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_14_V),7));
    tmp_3_fu_615_p16 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_15_V),7));
    tmp_3_fu_615_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_16_V),7));
    tmp_3_fu_615_p18 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_17_V),7));
    tmp_3_fu_615_p19 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_18_V),7));
    tmp_3_fu_615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_1_V),7));
    tmp_3_fu_615_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_19_V),7));
    tmp_3_fu_615_p21 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_20_V),7));
    tmp_3_fu_615_p22 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_21_V),7));
    tmp_3_fu_615_p23 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_22_V),7));
    tmp_3_fu_615_p24 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_23_V),7));
    tmp_3_fu_615_p25 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_24_V),7));
    tmp_3_fu_615_p26 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_25_V),7));
    tmp_3_fu_615_p27 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_26_V),7));
    tmp_3_fu_615_p28 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_27_V),7));
    tmp_3_fu_615_p29 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_28_V),7));
    tmp_3_fu_615_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_2_V),7));
    tmp_3_fu_615_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_29_V),7));
    tmp_3_fu_615_p31 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_30_V),7));
    tmp_3_fu_615_p32 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_31_V),7));
    tmp_3_fu_615_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_3_V),7));
    tmp_3_fu_615_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_4_V),7));
    tmp_3_fu_615_p6 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_5_V),7));
    tmp_3_fu_615_p7 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_6_V),7));
    tmp_3_fu_615_p8 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_7_V),7));
    tmp_3_fu_615_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_8_V),7));
    trunc_ln76_fu_702_p1 <= w11_V_q0(7 - 1 downto 0);
    w11_V_address0 <= zext_ln76_fu_685_p1(5 - 1 downto 0);

    w11_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w11_V_ce0 <= ap_const_logic_1;
        else 
            w11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_w_index15_phi_fu_392_p6));
    zext_ln76_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index15_phi_fu_392_p6),64));
end behav;
