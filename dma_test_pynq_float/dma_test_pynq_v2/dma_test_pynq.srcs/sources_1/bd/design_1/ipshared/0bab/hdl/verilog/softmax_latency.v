// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V,
        data_1_V,
        data_2_V,
        data_3_V,
        data_4_V,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V;
input  [15:0] data_1_V;
input  [15:0] data_2_V;
input  [15:0] data_3_V;
input  [15:0] data_4_V;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_199_p4;
wire   [9:0] y_V_1_fu_209_p4;
reg  signed [17:0] exp_res_2_V_reg_437;
reg  signed [17:0] exp_res_2_V_reg_437_pp0_iter2_reg;
reg  signed [17:0] exp_res_2_V_reg_437_pp0_iter3_reg;
reg  signed [17:0] exp_res_2_V_reg_437_pp0_iter4_reg;
reg  signed [17:0] exp_res_2_V_reg_437_pp0_iter5_reg;
reg  signed [17:0] exp_res_3_V_reg_443;
reg  signed [17:0] exp_res_3_V_reg_443_pp0_iter2_reg;
reg  signed [17:0] exp_res_3_V_reg_443_pp0_iter3_reg;
reg  signed [17:0] exp_res_3_V_reg_443_pp0_iter4_reg;
reg  signed [17:0] exp_res_3_V_reg_443_pp0_iter5_reg;
reg  signed [17:0] exp_res_4_V_reg_449;
reg  signed [17:0] exp_res_4_V_reg_449_pp0_iter2_reg;
reg  signed [17:0] exp_res_4_V_reg_449_pp0_iter3_reg;
reg  signed [17:0] exp_res_4_V_reg_449_pp0_iter4_reg;
reg  signed [17:0] exp_res_4_V_reg_449_pp0_iter5_reg;
reg  signed [17:0] exp_res_0_V_reg_455;
reg  signed [17:0] exp_res_0_V_reg_455_pp0_iter3_reg;
reg  signed [17:0] exp_res_0_V_reg_455_pp0_iter4_reg;
reg  signed [17:0] exp_res_0_V_reg_455_pp0_iter5_reg;
reg  signed [17:0] exp_res_1_V_reg_461;
reg  signed [17:0] exp_res_1_V_reg_461_pp0_iter3_reg;
reg  signed [17:0] exp_res_1_V_reg_461_pp0_iter4_reg;
reg  signed [17:0] exp_res_1_V_reg_461_pp0_iter5_reg;
wire   [17:0] add_ln703_2_fu_276_p2;
reg   [17:0] add_ln703_2_reg_467;
reg   [9:0] y_V_5_reg_472;
reg   [17:0] inv_exp_sum_V_reg_482;
wire  signed [29:0] sext_ln1116_fu_304_p1;
wire  signed [29:0] grp_fu_372_p2;
reg  signed [29:0] mul_ln1118_reg_521;
wire  signed [29:0] grp_fu_378_p2;
reg  signed [29:0] mul_ln1118_1_reg_526;
wire  signed [29:0] grp_fu_384_p2;
reg  signed [29:0] mul_ln1118_2_reg_531;
wire  signed [29:0] grp_fu_390_p2;
reg  signed [29:0] mul_ln1118_3_reg_536;
wire  signed [29:0] grp_fu_396_p2;
reg  signed [29:0] mul_ln1118_4_reg_541;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln251_2_fu_229_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln251_3_fu_244_p1;
wire   [63:0] zext_ln251_4_fu_259_p1;
wire   [63:0] zext_ln251_fu_264_p1;
wire   [63:0] zext_ln251_1_fu_268_p1;
wire   [63:0] zext_ln259_fu_300_p1;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] y_V_2_fu_219_p4;
wire   [9:0] y_V_3_fu_234_p4;
wire   [9:0] y_V_4_fu_249_p4;
wire   [17:0] add_ln703_1_fu_272_p2;
wire   [17:0] add_ln703_fu_281_p2;
wire   [17:0] exp_sum_V_fu_285_p2;
wire  signed [17:0] grp_fu_372_p0;
wire  signed [17:0] grp_fu_378_p0;
wire  signed [17:0] grp_fu_384_p0;
wire  signed [17:0] grp_fu_390_p0;
wire  signed [17:0] grp_fu_396_p0;
reg    grp_fu_372_ce;
reg    grp_fu_378_ce;
reg    grp_fu_384_ce;
reg    grp_fu_390_ce;
reg    grp_fu_396_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

softmax_latency_emb6 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_latency_incg #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_axi_mulocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_axi_mulocq_U569(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_372_p0),
    .din1(exp_res_0_V_reg_455_pp0_iter5_reg),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

myproject_axi_mulocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_axi_mulocq_U570(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_378_p0),
    .din1(exp_res_1_V_reg_461_pp0_iter5_reg),
    .ce(grp_fu_378_ce),
    .dout(grp_fu_378_p2)
);

myproject_axi_mulocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_axi_mulocq_U571(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_384_p0),
    .din1(exp_res_2_V_reg_437_pp0_iter5_reg),
    .ce(grp_fu_384_ce),
    .dout(grp_fu_384_p2)
);

myproject_axi_mulocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_axi_mulocq_U572(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_390_p0),
    .din1(exp_res_3_V_reg_443_pp0_iter5_reg),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p2)
);

myproject_axi_mulocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_axi_mulocq_U573(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_396_p0),
    .din1(exp_res_4_V_reg_449_pp0_iter5_reg),
    .ce(grp_fu_396_ce),
    .dout(grp_fu_396_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_2_reg_467 <= add_ln703_2_fu_276_p2;
        exp_res_0_V_reg_455_pp0_iter3_reg <= exp_res_0_V_reg_455;
        exp_res_0_V_reg_455_pp0_iter4_reg <= exp_res_0_V_reg_455_pp0_iter3_reg;
        exp_res_0_V_reg_455_pp0_iter5_reg <= exp_res_0_V_reg_455_pp0_iter4_reg;
        exp_res_1_V_reg_461_pp0_iter3_reg <= exp_res_1_V_reg_461;
        exp_res_1_V_reg_461_pp0_iter4_reg <= exp_res_1_V_reg_461_pp0_iter3_reg;
        exp_res_1_V_reg_461_pp0_iter5_reg <= exp_res_1_V_reg_461_pp0_iter4_reg;
        exp_res_2_V_reg_437_pp0_iter2_reg <= exp_res_2_V_reg_437;
        exp_res_2_V_reg_437_pp0_iter3_reg <= exp_res_2_V_reg_437_pp0_iter2_reg;
        exp_res_2_V_reg_437_pp0_iter4_reg <= exp_res_2_V_reg_437_pp0_iter3_reg;
        exp_res_2_V_reg_437_pp0_iter5_reg <= exp_res_2_V_reg_437_pp0_iter4_reg;
        exp_res_3_V_reg_443_pp0_iter2_reg <= exp_res_3_V_reg_443;
        exp_res_3_V_reg_443_pp0_iter3_reg <= exp_res_3_V_reg_443_pp0_iter2_reg;
        exp_res_3_V_reg_443_pp0_iter4_reg <= exp_res_3_V_reg_443_pp0_iter3_reg;
        exp_res_3_V_reg_443_pp0_iter5_reg <= exp_res_3_V_reg_443_pp0_iter4_reg;
        exp_res_4_V_reg_449_pp0_iter2_reg <= exp_res_4_V_reg_449;
        exp_res_4_V_reg_449_pp0_iter3_reg <= exp_res_4_V_reg_449_pp0_iter2_reg;
        exp_res_4_V_reg_449_pp0_iter4_reg <= exp_res_4_V_reg_449_pp0_iter3_reg;
        exp_res_4_V_reg_449_pp0_iter5_reg <= exp_res_4_V_reg_449_pp0_iter4_reg;
        inv_exp_sum_V_reg_482 <= invert_table2_q0;
        mul_ln1118_1_reg_526 <= grp_fu_378_p2;
        mul_ln1118_2_reg_531 <= grp_fu_384_p2;
        mul_ln1118_3_reg_536 <= grp_fu_390_p2;
        mul_ln1118_4_reg_541 <= grp_fu_396_p2;
        mul_ln1118_reg_521 <= grp_fu_372_p2;
        y_V_5_reg_472 <= {{exp_sum_V_fu_285_p2[17:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_455 <= exp_table1_q3;
        exp_res_1_V_reg_461 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_2_V_reg_437 <= exp_table1_q0;
        exp_res_3_V_reg_443 <= exp_table1_q1;
        exp_res_4_V_reg_449 <= exp_table1_q2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to8 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_378_ce = 1'b1;
    end else begin
        grp_fu_378_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_384_ce = 1'b1;
    end else begin
        grp_fu_384_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_396_ce = 1'b1;
    end else begin
        grp_fu_396_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_272_p2 = ($signed(exp_res_2_V_reg_437) + $signed(exp_res_4_V_reg_449));

assign add_ln703_2_fu_276_p2 = ($signed(add_ln703_1_fu_272_p2) + $signed(exp_res_3_V_reg_443));

assign add_ln703_fu_281_p2 = ($signed(exp_res_0_V_reg_455) + $signed(exp_res_1_V_reg_461));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_285_p2 = (add_ln703_2_reg_467 + add_ln703_fu_281_p2);

assign exp_table1_address0 = zext_ln251_2_fu_229_p1;

assign exp_table1_address1 = zext_ln251_3_fu_244_p1;

assign exp_table1_address2 = zext_ln251_4_fu_259_p1;

assign exp_table1_address3 = zext_ln251_fu_264_p1;

assign exp_table1_address4 = zext_ln251_1_fu_268_p1;

assign grp_fu_372_p0 = sext_ln1116_fu_304_p1;

assign grp_fu_378_p0 = sext_ln1116_fu_304_p1;

assign grp_fu_384_p0 = sext_ln1116_fu_304_p1;

assign grp_fu_390_p0 = sext_ln1116_fu_304_p1;

assign grp_fu_396_p0 = sext_ln1116_fu_304_p1;

assign invert_table2_address0 = zext_ln259_fu_300_p1;

assign res_0_V = {{mul_ln1118_reg_521[29:14]}};

assign res_1_V = {{mul_ln1118_1_reg_526[29:14]}};

assign res_2_V = {{mul_ln1118_2_reg_531[29:14]}};

assign res_3_V = {{mul_ln1118_3_reg_536[29:14]}};

assign res_4_V = {{mul_ln1118_4_reg_541[29:14]}};

assign sext_ln1116_fu_304_p1 = $signed(inv_exp_sum_V_reg_482);

assign y_V_1_fu_209_p4 = {{data_1_V[15:6]}};

assign y_V_2_fu_219_p4 = {{data_2_V[15:6]}};

assign y_V_3_fu_234_p4 = {{data_3_V[15:6]}};

assign y_V_4_fu_249_p4 = {{data_4_V[15:6]}};

assign y_V_fu_199_p4 = {{data_0_V[15:6]}};

assign zext_ln251_1_fu_268_p1 = y_V_1_fu_209_p4;

assign zext_ln251_2_fu_229_p1 = y_V_2_fu_219_p4;

assign zext_ln251_3_fu_244_p1 = y_V_3_fu_234_p4;

assign zext_ln251_4_fu_259_p1 = y_V_4_fu_249_p4;

assign zext_ln251_fu_264_p1 = y_V_fu_199_p4;

assign zext_ln259_fu_300_p1 = y_V_5_reg_472;

endmodule //softmax_latency
